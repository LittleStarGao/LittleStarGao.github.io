{"total":40,"pageSize":12,"pageCount":4,"data":[{"title":"Flutter的Function函数对象","uid":"39ade3484174d56b659a76daf70210b1","slug":"Flutter的Function函数对象","date":"2021-12-17T01:07:57.000Z","updated":"2021-12-17T01:07:57.858Z","comments":true,"path":"api/articles/Flutter的Function函数对象.json","cover":null,"text":"","link":"","photos":[],"count_time":{"symbolsCount":0,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"Flutter参数","uid":"ef5aa7e92bb61e597e24d0ade2427469","slug":"Flutter参数","date":"2021-12-17T01:01:05.000Z","updated":"2021-12-17T01:01:05.181Z","comments":true,"path":"api/articles/Flutter参数.json","cover":null,"text":"","link":"","photos":[],"count_time":{"symbolsCount":0,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"Runtime总结","uid":"92ebd029be42f71fd12661e2724b68c4","slug":"Runtime总结","date":"2021-12-09T08:41:58.000Z","updated":"2021-12-09T08:41:58.997Z","comments":true,"path":"api/articles/Runtime总结.json","cover":null,"text":"","link":"","photos":[],"count_time":{"symbolsCount":0,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"Dart函数","uid":"1e44f5b3bd24c99dd3f8c314188c1ad6","slug":"Dart函数","date":"2021-12-08T07:42:51.000Z","updated":"2021-12-08T07:42:51.179Z","comments":true,"path":"api/articles/Dart函数.json","cover":null,"text":"","link":"","photos":[],"count_time":{"symbolsCount":0,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Dart运算符","uid":"a18a0021d0e3774e23afd0f4a2e611d8","slug":"Dart运算符","date":"2021-12-08T07:14:50.000Z","updated":"2021-12-08T07:43:09.854Z","comments":true,"path":"api/articles/Dart运算符.json","cover":null,"text":"Dart 基础语法（运算符）本篇文章上接初探 Dart 语法上篇，主要涉及一些 Dart 中的运算符、异常、函数、面向对象等。 1. 运算符1.1 算术运算符 名称 运算符 例子 加 + var result = 1 + 1; 减 - var result = 5 - 1; 乘 ...","link":"","photos":[],"count_time":{"symbolsCount":"7.8k","symbolsTime":"7 mins."},"categories":[],"tags":[],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Dart基础语法总结","uid":"b31cd86eb2d45436159ffec7e16dc297","slug":"Dart基础语法总结","date":"2021-12-08T05:36:37.000Z","updated":"2021-12-08T07:43:02.842Z","comments":true,"path":"api/articles/Dart基础语法总结.json","cover":null,"text":"Dart 基本输出操作void main() &#123; print('Hello World!');//注意：Dart 和 Java 一样表达式以分号结尾，写习惯 Kotlin 的小伙伴需要注意了，这可能是你从 Kotlin 转 Dart 最大不适之一。 &#125; //D...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"11 mins."},"categories":[],"tags":[{"name":"Flutter","slug":"Flutter","count":1,"path":"api/tags/Flutter.json"}],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"NSDictionary实现原理","uid":"859f0b706fef61b48159b2531ea13be9","slug":"NSDictionary实现原理","date":"2021-12-08T05:04:53.000Z","updated":"2021-12-08T05:16:49.849Z","comments":true,"path":"api/articles/NSDictionary实现原理.json","cover":null,"text":"/Users/jiajiagao/Desktop/截屏2021-11-26 下午2.39.43.png ","link":"","photos":[],"count_time":{"symbolsCount":52,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Mybatis环境搭建","uid":"84c46e71d38f152fbededa209add7e56","slug":"Mybatis环境搭建","date":"2021-10-30T11:49:03.000Z","updated":"2021-10-30T12:19:16.086Z","comments":true,"path":"api/articles/Mybatis环境搭建.json","cover":[],"text":"MyBatis 环境搭建 mybatis 是一个优秀的基于 java 的持久层框架，它内部封装了 jdbc，使开发者只需要关注 sql 语句本身， 而不需要花费精力去处理加载驱动、创建连接、创建 statement 等繁杂的过程。mybatis 通过 xml 或注解的方式将要执行...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"mybatis","slug":"mybatis","count":1,"path":"api/tags/mybatis.json"}],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"内存管理","uid":"5c41202f364c38ccdbd34c8ae458f2bb","slug":"内存管理","date":"2021-10-03T11:47:40.000Z","updated":"2021-10-03T11:57:17.487Z","comments":true,"path":"api/articles/内存管理.json","cover":"https://images.xiaozhuanlan.com/photo/2019/0156fea8cc60760bdf6d2bd4229514d1.png","text":"内存布局栈(stack):方法调用，局部变量等，是连续的，高地址往低地址扩展 堆(heap):通过alloc等分配的对象，是离散的，低地址往高地址扩展，需要我们手动控制 未初始化数据(bss):未初始化的全局变量等 已初始化数据(data):已初始化的全局变量等 代码段(text...","link":"","photos":[],"count_time":{"symbolsCount":149,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"内存管理","slug":"内存管理","count":1,"path":"api/tags/内存管理.json"}],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"UIView图像卡顿掉帧原因","uid":"1f36431921db0064bd4a7d93ff9bda02","slug":"UIView图像卡顿掉帧原因","date":"2021-10-03T11:08:04.000Z","updated":"2021-10-03T11:46:26.139Z","comments":true,"path":"api/articles/UIView图像卡顿掉帧原因.json","cover":"https://images.xiaozhuanlan.com/photo/2019/0156fea8cc60760bdf6d2bd4229514d1.png","text":"UI卡顿掉帧原因 iOS设备的硬件时钟会发出Vsync（垂直同步信号），然后App的CPU会去计算屏幕要显示的内容，之后将计算好的内容提交到GPU去渲染。随后，GPU将渲染结果提交到帧缓冲区，等到下一个VSync到来时将缓冲区的帧显示到屏幕上。也就是说，一帧的显示是由CPU和GP...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"UIView","slug":"UIView","count":3,"path":"api/tags/UIView.json"}],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"UIView图像显示原理","uid":"150d0752192ea36adfb8f6a2036d586d","slug":"UIView图像显示原理","date":"2021-10-03T11:05:50.000Z","updated":"2021-10-03T11:07:46.358Z","comments":true,"path":"api/articles/UIView图像显示原理.json","cover":[],"text":"图像显示原理 image 1.CPU:输出位图 2.GPU :图层渲染，纹理合成 3.把结果放到帧缓冲区(frame buffer)中 4.再由视频控制器根据vsync信号在指定时间之前去提取帧缓冲区的屏幕显示内容 5.显示到屏幕上 CPU工作 1.Layout: UI布局，文本...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"UIView事件传递机制","uid":"e9b46794781d0a34e4fb025b5a7d50ca","slug":"UIView事件传递机制","date":"2021-10-03T10:54:58.000Z","updated":"2021-10-03T11:07:08.956Z","comments":true,"path":"api/articles/UIView事件传递机制.json","cover":"https://images.xiaozhuanlan.com/photo/2019/0156fea8cc60760bdf6d2bd4229514d1.png","text":"事件传递与视图响应链 : - (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event; - (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent *)event; i...","link":"","photos":[],"count_time":{"symbolsCount":189,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"UIView","slug":"UIView","count":3,"path":"api/tags/UIView.json"}],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}