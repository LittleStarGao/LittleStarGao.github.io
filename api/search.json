[{"id":"89c4a16720cd53613e2e3d79607ee50f","title":"categoryClass","content":"\n\n类别（新）\n类别的设计体现了面向对象的核心原则，即开放封闭原则（Open Closed Principle，OCP）。对扩展开放，对修改封闭，从而降低代码的耦合度。\n\n类别（Category）与继承（Inheritance）的区别如下：\n\n子类继承是进行类扩展的另一种常用方法，当然基于子类继承的扩展更加自由、正式，既可以新增属性，也可以新增方法。\n类别可以在不获悉、不改变原来代码的情况下往里面添加新的方法，但也只能添加方法，不能添加属性，属于功能上的扩展。\n相对于子类继承扩展，类别的另一明显优势就是实现了功能的局部化封装，扩展的功能只会在本类被引用时看到\n\n类别与类扩展的区别如下：\n\n类别和类扩展的明显区别在于，类扩展可以添加属性。\n类扩展添加的方法是必须要实现的。\n类扩展可以认为是一个私有的匿名的类别，因为类扩展定义在.m文件头部\n添加的属性和方法都没有暴露在头文件，所以在不考虑运行时特性的前提下这些扩展属性和方法只能在类内部使用，一定程度上可以说是实现了私有的机制。\n\nObjective-C中类别特性的作用及其局限性是什么Objective-C中类别特性的作用如下：\n\n可以将类的实现分散到多个不同文件或多个不同框架中（扩充新的方法）。\n可以创建对私有方法的前向引用。\n可以向对象添加非正式协议。\n\nObjective-C中类别特性的局限性如下：\n\n类别只能向原类中添加新的方法，且只能添加而不能删除或修改原方法，不能向原类中添加新的属性。\n类别向原类中添加的方法是全局有效的而且优先级最高，如果和原类的方法重名，那么会无条件覆盖掉原来的方法，造成难以发现的潜在危险。因此，使用类别添加方法一定注意保证是单纯的添加新方法，避免覆盖原来的方法（可以通过添加该类别的方法前缀来防止冲突）。例如，在多人协作开发的过程中，如果团队中有人在其他成员不知情的情况下使用类别将类中的方法覆盖了，那么这会使得项目在运行时出现意想不到的问题，并且难以发现和纠正问题。\n\n","slug":"测试","date":"2021-04-25T12:01:33.000Z","categories_index":"iOS","tags_index":"iOS","author_index":"LittleLight"},{"id":"89c4a16720cd53613e2e3d79607ee50f","title":"categoryClass","content":"\n\n类别（新）\n类别的设计体现了面向对象的核心原则，即开放封闭原则（Open Closed Principle，OCP）。对扩展开放，对修改封闭，从而降低代码的耦合度。\n\n类别（Category）与继承（Inheritance）的区别如下：\n\n子类继承是进行类扩展的另一种常用方法，当然基于子类继承的扩展更加自由、正式，既可以新增属性，也可以新增方法。\n类别可以在不获悉、不改变原来代码的情况下往里面添加新的方法，但也只能添加方法，不能添加属性，属于功能上的扩展。\n相对于子类继承扩展，类别的另一明显优势就是实现了功能的局部化封装，扩展的功能只会在本类被引用时看到\n\n类别与类扩展的区别如下：\n\n类别和类扩展的明显区别在于，类扩展可以添加属性。\n类扩展添加的方法是必须要实现的。\n类扩展可以认为是一个私有的匿名的类别，因为类扩展定义在.m文件头部\n添加的属性和方法都没有暴露在头文件，所以在不考虑运行时特性的前提下这些扩展属性和方法只能在类内部使用，一定程度上可以说是实现了私有的机制。\n\nObjective-C中类别特性的作用及其局限性是什么Objective-C中类别特性的作用如下：\n\n可以将类的实现分散到多个不同文件或多个不同框架中（扩充新的方法）。\n可以创建对私有方法的前向引用。\n可以向对象添加非正式协议。\n\nObjective-C中类别特性的局限性如下：\n\n类别只能向原类中添加新的方法，且只能添加而不能删除或修改原方法，不能向原类中添加新的属性。\n类别向原类中添加的方法是全局有效的而且优先级最高，如果和原类的方法重名，那么会无条件覆盖掉原来的方法，造成难以发现的潜在危险。因此，使用类别添加方法一定注意保证是单纯的添加新方法，避免覆盖原来的方法（可以通过添加该类别的方法前缀来防止冲突）。例如，在多人协作开发的过程中，如果团队中有人在其他成员不知情的情况下使用类别将类中的方法覆盖了，那么这会使得项目在运行时出现意想不到的问题，并且难以发现和纠正问题。\n\n","slug":"categoryClass","date":"2021-04-25T12:01:33.000Z","categories_index":"","tags_index":"","author_index":"LittleLight"},{"id":"e277b81e144e00ba0580f618a83681f9","title":"category","content":"\n\n类别（新）\n类别的设计体现了面向对象的核心原则，即开放封闭原则（Open Closed Principle，OCP）。对扩展开放，对修改封闭，从而降低代码的耦合度。\n\n类别（Category）与继承（Inheritance）的区别如下：\n\n子类继承是进行类扩展的另一种常用方法，当然基于子类继承的扩展更加自由、正式，既可以新增属性，也可以新增方法。\n类别可以在不获悉、不改变原来代码的情况下往里面添加新的方法，但也只能添加方法，不能添加属性，属于功能上的扩展。\n相对于子类继承扩展，类别的另一明显优势就是实现了功能的局部化封装，扩展的功能只会在本类被引用时看到\n\n类别与类扩展的区别如下：\n\n类别和类扩展的明显区别在于，类扩展可以添加属性。\n类扩展添加的方法是必须要实现的。\n类扩展可以认为是一个私有的匿名的类别，因为类扩展定义在.m文件头部\n添加的属性和方法都没有暴露在头文件，所以在不考虑运行时特性的前提下这些扩展属性和方法只能在类内部使用，一定程度上可以说是实现了私有的机制。\n\nObjective-C中类别特性的作用及其局限性是什么Objective-C中类别特性的作用如下：\n\n可以将类的实现分散到多个不同文件或多个不同框架中（扩充新的方法）。\n可以创建对私有方法的前向引用。\n可以向对象添加非正式协议。\n\nObjective-C中类别特性的局限性如下：\n\n类别只能向原类中添加新的方法，且只能添加而不能删除或修改原方法，不能向原类中添加新的属性。\n类别向原类中添加的方法是全局有效的而且优先级最高，如果和原类的方法重名，那么会无条件覆盖掉原来的方法，造成难以发现的潜在危险。因此，使用类别添加方法一定注意保证是单纯的添加新方法，避免覆盖原来的方法（可以通过添加该类别的方法前缀来防止冲突）。例如，在多人协作开发的过程中，如果团队中有人在其他成员不知情的情况下使用类别将类中的方法覆盖了，那么这会使得项目在运行时出现意想不到的问题，并且难以发现和纠正问题。\n\n","slug":"category","date":"2021-04-24T02:46:35.000Z","categories_index":"","tags_index":"","author_index":"LittleLight"},{"id":"afb2b07e802409f4fec5da7128301e15","title":"如何提高面试率.md","content":"\n“成功者讲方法，失败者讲理由！”虽然是一句老掉牙的话，但却饱含人生哲理。面对越来越激烈的竞争局面，以及后续大批新人的涌入，我们不仅要埋头苦干，提升自己的专业技能，更需要学会一些面试技巧，因为这些技巧会让你的求职之路事半功倍，为你赢得更多可能性。\n我的这些面试技巧分为，面试前准备、面试中展现，以及面试后复盘这三部分，有了这些技巧再加上你的专业技能，相信一定可以“披荆斩棘”斩获更多的 Offer，为自己的未来赢得更多可能。\n首先，是面试前准备凡事预则立不预则废，在正式“打仗”之前，我们一定要仔细研究“对手”，对于面试也是这样，只有预先准备才有可能获得成功，面试前或者是投简历前我们要先研究两个问题，第一，这个公司的主营业务是什么？第二，这个公司使用的技术栈是什么？研究了公司的主营业务后，你自然就会知道在简历中应体现哪些重点内容了。比如这家公司是做电商的，你之前既做过教育，又做过电商，也做过医疗，那么你应该重点将电商的项目经验和从业经历体现在简历上，这样你获得面试的概率和成功的概率就会大很多，毕竟公司都希望招聘到“更合适”的人。这里并不是鼓励你造假，只是提醒你可以从众多项目中，提取并展示和这个公司业务相匹配的项目。\n研究公司的技术栈也是同样的道理，技术经理也希望招来的人能直接上手，所以在写简历时或者面试时就可以重点向目标公司的技术栈靠拢。但有一点要特别注意，你说的这些技术点也是应聘单位擅长的技术栈，如果你真的懂，可以引导面试官往这个技术点上靠拢。但如果你对这些技术不是很擅长，切记千万不要这么做，这样只会适得其反，所以你应在简历和面试中重点突出你擅长的技术栈，并尽量向应聘公司的技术栈靠拢。除以上内容外，你还要准备一些常见的面试问题，比如你是如何看待加班的？你可以这样回答：你个人不认同无效加班，更倾向于以事情为导向，高效地处理完成工作，但如果公司赶项目或者有偶尔有加班的情况，自己也并不排斥，愿意跟着公司步伐走。又比如面试结尾，你还有什么问题要问我吗？等等类似的问题，都需要提前准备一下。\n在写简历时，还需要注意以下几点：• 第一，扬长避短，将优势点放在核心位置。比如你是大专文凭，那么就应该把教育背景写在简历的最下方也就是最不起眼的地方，而在最重要的位置优先展示自己的特长信息；• 第二，信息清晰，写清必要的内容。比如你要应聘的岗位以及期望薪资，而不是“面议”，因为有些 HR 看到信息模糊的简历会将其直接将其丢弃，因为她不确认你的能力和你期望的薪资是否匹配，如果应聘者很多的情况下，应聘单位就没必要“冒险”给一个不确定的人面试的机会了；• 第三，准确地描述项目经验。项目经验一般 3 个左右即可，需要描述的内容大致有：这个项目是什么？你负责什么模块？项目中使用了什么技术栈？项目的上线地址是什么？项目中有没有遇到什么问题？你是如何解决？等等内容。面试中展现在面试中你首先应该展示的是你的专业技术技能，让面试官充分了解你对某项技术的掌握情况，你可以深入讲解某个项目中的细节技术处理方案，或者通过一个深入的技术点展示你对这项技术的熟练掌握程度。如果你是学生的话，可以用成果证明，比如你的竞赛成绩或者获奖证书等。除了专业技能外，你还应在面试中展示你良好的沟通能力和理解能力，通过你的言行举止和沟通交流的内容，面试官便能对此有所察觉和判断，你需要注意的就是不要有抵抗或者是消极的情绪，正常发挥就行。面试中另一个需要注意的点就是要尽量展现你坦诚的一面。不会的知识点，回答不会就好，不要滥竽充数，也不要顾左右而言他，因为面试官一般都不傻，并且在面试的过程中，有不会的知识点和面试题也很正常，每个人不可能知道所有的答案，坦诚回答就好。\n另一个是和你的专业技能同样重要，在面试中你应该尽量展现你对技术的热爱，因为只有热爱的东西你才可能把它做好，它决定了你以后技术发展的速度和深度，因此面试官对此会特别在意，能展现你对技术的热爱的点有以下几个：• 写技术博客• 创作技术视频，比如在 B 站分享你的技术视频• 在 GitHub 上有参与开源项目或者自己的开源项目• 有自己的个人博客或者是其他个人工具网站• 出书或者是技术专栏\n以上这些方面，都是你对技术热爱的一些具体体现。最后在面试中你也要尽量展现你的求知欲，比如爱好看书、参加技术沙龙等，这些都能体现你对技术的孜孜追求，有追求的人进步一般都很快，因此也更受用人企业的欣赏和认同。\n","slug":"如何提高面试率","date":"2021-04-24T02:06:35.000Z","categories_index":"","tags_index":"iOS","author_index":"LittleLight"}]