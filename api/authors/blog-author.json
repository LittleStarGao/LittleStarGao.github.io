{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}},"post_list":[{"title":"《腾讯iOS测试实践》学习（一）","uid":"72c9fa0d926f81572e4b5de9847c1152","slug":"《腾讯iOS测试实践》学习（一）","date":"2021-10-01T03:47:01.990Z","updated":"2021-10-01T05:26:27.351Z","comments":true,"path":"api/articles/《腾讯iOS测试实践》学习（一）.json","keywords":null,"cover":"https://imgtu.com/i/47SwcV","text":" 工程效率 需求评审：需求评审机制以及更新通知，避免需求有改动而没有及时同步到相关角色。 代码质量：静态代码扫描，千行代码缺陷率等。 架构评审：代码架构的讨论以及评审。 Bug流程：Bug生命周期，避免随便修改Bug状态以及备注缺失。 Code Review：代码评审，如果有代码...","link":"","photos":[],"count_time":{"symbolsCount":436,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"iOS测试","slug":"iOS测试","count":1,"path":"api/tags/iOS测试.json"}],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"iOS设计模式（一）","uid":"69226c43fa619d7df7756bf099da8b7a","slug":"iOS设计模式（一）","date":"2021-09-30T12:30:53.000Z","updated":"2021-10-01T01:00:07.655Z","comments":true,"path":"api/articles/iOS设计模式（一）.json","keywords":null,"cover":[],"text":"类继承和对象组合 类继承简单直接、硬卧关系在编译静态定义 被复用的实现易于修改 缺点： 因为类继承在编译时定义、所以无法在运行时进行变更从父类继承来的实现 子类描述在父类、 子类直接面对父类的封装、因此破坏了封装 父类实现的任何变更都会强制爱子类到的变更 因为在新的问题场景下京城...","link":"","photos":[],"count_time":{"symbolsCount":471,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"单元测试","uid":"78bacd8b33e55bbfb6a2cbf684cbf20b","slug":"unit-test","date":"2021-07-13T03:32:17.000Z","updated":"2021-07-14T07:45:20.214Z","comments":true,"path":"api/articles/unit-test.json","keywords":null,"cover":null,"text":"别测试代码，而应该验证程序的行为测试应该只在程序的行为和预期的不一样时，才不通过。测试应该测试程序的代码做了什么，而不是测试程序如何实现。 验证应用程序做了什么的，叫做行为测试。 即使应用程序的行为不发生变化，只要应用程序的代码发生了变化，测试就不通过的，叫做脆性测试。 假设我们...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[],"tags":[{"name":"单元测试","slug":"单元测试","count":1,"path":"api/tags/单元测试.json"}],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"iOS 组件化拆分总结","uid":"08c633a5de2fe3edfdf41cfdec1b1bae","slug":"iOS-component","date":"2021-06-11T08:05:51.000Z","updated":"2021-06-18T07:36:33.579Z","comments":true,"path":"api/articles/iOS-component.json","keywords":null,"cover":[],"text":"组件化一、为何要组件化? 这是我们在做组件化的时候要思考的，它的优点和缺点是什么，这样我们对组件化有个基本认识 1. 组件化定义 组件是由一个或多个类构成，能完整描述一个业务场景，并能被其他业务场景复用的功能单位。 比如内存，硬盘，CPU，显示器等，拿出其中任何一个部件都能被其他...","link":"","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"18 mins."},"categories":[],"tags":[{"name":"组件化","slug":"组件化","count":1,"path":"api/tags/组件化.json"}],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Xcode Server CI 持续集成","uid":"d68e4e31d1e8b7032dd88c62b8f9b3ca","slug":"Xcode-Server-CI-持续集成","date":"2021-06-10T07:58:03.000Z","updated":"2021-06-10T10:09:07.497Z","comments":true,"path":"api/articles/Xcode-Server-CI-持续集成.json","keywords":null,"cover":[],"text":"Xcode Server CI 持续集成一、 Xcode Server 基本概念 Xcode Server是配置在Mac端的一个服务器，服务器上我们可以创建Bot自动执行机器人 软件应用程序在本地（Xcode development Macs）开发过程中，会将代码不断合并到git...","link":"","photos":[],"count_time":{"symbolsCount":574,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"持续集成","slug":"持续集成","count":1,"path":"api/tags/持续集成.json"}],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"async 和 await 同步等待","uid":"549def405a2020c02b3886501c2d84f3","slug":"async-await","date":"2021-06-01T03:45:18.000Z","updated":"2021-06-03T08:20:01.522Z","comments":true,"path":"api/articles/async-await.json","keywords":null,"cover":null,"text":"Dart 获取相应数据操作 ","link":"","photos":[],"count_time":{"symbolsCount":22,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Dart","slug":"Dart","count":4,"path":"api/tags/Dart.json"}],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"抽象构造函数","uid":"6af98c5762fa00ab05498386038da6c3","slug":"abstractClass","date":"2021-06-01T02:16:37.000Z","updated":"2021-06-01T02:36:46.235Z","comments":true,"path":"api/articles/abstractClass.json","keywords":null,"cover":null,"text":"抽象类 abstract关键字修饰class 继承的方式使用 接口的方式使用 abstract class Message &#123; factory Message(String type) &#123; switch(type) &#123; case 'foot': re...","link":"","photos":[],"count_time":{"symbolsCount":825,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Dart","slug":"Dart","count":4,"path":"api/tags/Dart.json"}],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"DartClass","uid":"3b284d7eb9880174f64e9bf09d231aff","slug":"DartClass","date":"2021-06-01T01:28:38.000Z","updated":"2021-06-01T02:15:46.774Z","comments":true,"path":"api/articles/DartClass.json","keywords":null,"cover":null,"text":"Dart 类相关的使用命名构造函数 Point.fromJSON(Map json) class Point &#123; num x; num y; Point(this.x, this.y); &#x2F;&#x2F; 命名构造函数（命名构造函数） Point.fromJSO...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"Dart","slug":"Dart","count":4,"path":"api/tags/Dart.json"}],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"DartException","uid":"1117fb54e92a8351488adf129028b2a6","slug":"DartException","date":"2021-05-31T09:06:01.000Z","updated":"2021-06-01T01:10:00.563Z","comments":true,"path":"api/articles/DartException.json","keywords":null,"cover":null,"text":"Dart 异常处理操作![截屏2021-05-31 下午5.06.39](DartException/截屏2021-05-31 下午5.06.39.png) 延迟加载异常 DeferredLoadException 延迟加载异常 throw new FormateExceptio...","link":"","photos":[],"count_time":{"symbolsCount":505,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Dart","slug":"Dart","count":4,"path":"api/tags/Dart.json"}],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"应用性能分析方法","uid":"5c608ba3383f27b31f8830b3a9b5f6d6","slug":"应用性能分析方法","date":"2021-05-22T07:06:49.000Z","updated":"2021-05-22T07:08:32.663Z","comments":true,"path":"api/articles/应用性能分析方法.json","keywords":null,"cover":null,"text":"应用性能分析方法1. 采样顾名思义，采样(或基于探测点的性能分析)是指以一定的周期间隔采集状态，这通常需要借助工具。由于不会干扰应用的执行，因此采样可以很好地提供应用的全景图。采样的不足之处在于它不能返回 100% 精确的细节。如果采样的频率是 10 毫秒，那么你就无法得知在探测...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"iOS性能优化","slug":"iOS性能优化","count":2,"path":"api/tags/iOS性能优化.json"}],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"iOS性能优化指标","uid":"d6599ba5117b38d8d4d285c032bd712d","slug":"iOS性能优化指标","date":"2021-05-22T06:07:50.000Z","updated":"2021-05-22T06:09:06.209Z","comments":true,"path":"api/articles/iOS性能优化指标.json","keywords":null,"cover":[],"text":"性能指标 性能指标是面向用户的各种属性。每个属性可能是一个或多个可测量工程参数的一个要素。 1.2.1 内存内存涉及运行应用所需的 RAM 最小值，以及应用消耗的内存平均值和峰值。最小内存值 会严重限制硬件，而更高的内存平均值和峰值意味着更多的后台应用会被强制关闭。 同时还要确保...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"iOS性能优化","slug":"iOS性能优化","count":2,"path":"api/tags/iOS性能优化.json"}],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"iOS内存对齐","uid":"eafabc105702abbd3d554d5c51e703dd","slug":"Memory-alignment","date":"2021-05-03T00:55:06.000Z","updated":"2021-05-03T02:17:18.409Z","comments":true,"path":"api/articles/Memory-alignment.json","keywords":null,"cover":null,"text":"iOS中内存对齐数据对齐规则 结构体和联合体（union）的数据成员，第一个数据成员放到offset为0的地方，以后每个数据成员存储的起始位置要从该成员大小或者成员子成员大小（只要该成员有子成员，比如说数组，结构体等）的整数倍开始（比如int为4自己接，则要从4的整数倍地址开始存...","link":"","photos":[],"count_time":{"symbolsCount":"7.5k","symbolsTime":"7 mins."},"categories":[],"tags":[],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Spring基础了解","uid":"a519dcebcf7b75aa7909ffb897e4913c","slug":"Spring-base","date":"2021-05-02T06:22:41.000Z","updated":"2021-05-02T08:29:03.294Z","comments":true,"path":"api/articles/Spring-base.json","keywords":null,"cover":[],"text":"Spring 简介​ Spring 是分层的 full-stack（全栈） 轻量级开源框架，以IoC和 AOP 为内核，提供了展现层Spring MVC和业务层事务管理等众多的企业级应⽤技术，还能整合开源世界众多著名的第三⽅框架和类库，已 经成为使⽤最多的Java EE企业应⽤开...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"动态SQL","uid":"83f1863d7d241c1d5ddb943bddf231fd","slug":"dynamicSQL","date":"2021-05-01T23:43:13.000Z","updated":"2021-05-01T23:44:31.701Z","comments":true,"path":"api/articles/dynamicSQL.json","keywords":null,"cover":null,"text":"动态sql语句**动态sql语句概述 ** Mybatis 的映射文件中，前面我们的 SQL 都是比较简单的，有些时候业务逻辑复杂时，我们的 SQL是动 态变化的，此时在前面的学习中我们的 SQL 就不能满足要求了。 ","link":"","photos":[],"count_time":{"symbolsCount":119,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"alloc&init探究","uid":"20c5d0afd79142c4ce377e5e3d6eadea","slug":"alloc","date":"2021-05-01T09:45:39.000Z","updated":"2021-05-02T11:46:43.467Z","comments":true,"path":"api/articles/alloc.json","keywords":null,"cover":[],"text":"alloc 和 init 基本原理LGPerson *p &#x3D; [[LGPerson alloc] init]; LGPerson *p1 &#x3D; [p init]; &#x2F;&#x2F; objc_msgSend （id 消息接收者，sel 发送消息） LGP...","link":"","photos":[],"count_time":{"symbolsCount":"4.6k","symbolsTime":"4 mins."},"categories":[],"tags":[],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Mybatis对象关系映射","uid":"9d874e909a3a7a396d1451469b922294","slug":"Mybatis对象关系映射","date":"2021-04-29T12:12:40.000Z","updated":"2021-05-01T23:27:21.404Z","comments":true,"path":"api/articles/Mybatis对象关系映射.json","keywords":null,"cover":null,"text":"对象/关系数据库映射(ORM) ORM全称Object/Relation Mapping:表示对象-关系映射的缩写 ORM完成面向对象的编程语言到关系数据库的映射。当ORM框架完成映射后，程序员既可以利用面向 对象程序设计语言的简单易用性，又可以利用关系数据库的技术优势。ORM把...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"Mybatis","slug":"Mybatis","count":1,"path":"api/tags/Mybatis.json"}],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"如何Category中增加属性","uid":"8d5bb184f1a8d1302f056982173a3dd0","slug":"如何Category中增加属性","date":"2021-04-29T11:17:24.000Z","updated":"2021-10-01T05:25:11.967Z","comments":true,"path":"api/articles/如何Category中增加属性.json","keywords":null,"cover":"https://images.xiaozhuanlan.com/photo/2019/0156fea8cc60760bdf6d2bd4229514d1.png","text":"如何在Category中增加属性（关联对象）在实际开发中，如果为Category添加一个属性，那么系统将不会为这个属性设置访问器方法，也就是setter和getter方法。这时候可以使用runtime提供的关联对象方法，动态地为该属性实现访问器方法。 开发者可以将关联对象想象成一...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"如何提高面试率.md","uid":"afb2b07e802409f4fec5da7128301e15","slug":"如何提高面试率","date":"2021-04-24T02:06:35.000Z","updated":"2021-04-24T02:28:37.148Z","comments":true,"path":"api/articles/如何提高面试率.json","keywords":null,"cover":[],"text":" “成功者讲方法，失败者讲理由！”虽然是一句老掉牙的话，但却饱含人生哲理。面对越来越激烈的竞争局面，以及后续大批新人的涌入，我们不仅要埋头苦干，提升自己的专业技能，更需要学会一些面试技巧，因为这些技巧会让你的求职之路事半功倍，为你赢得更多可能性。 我的这些面试技巧分为，面试前准备...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"iOS","slug":"iOS","count":1,"path":"api/tags/iOS.json"}],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}],"categories":0,"tags":0,"word_count":"67k","post_count":18}