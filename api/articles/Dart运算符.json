{"title":"Dart运算符","uid":"a18a0021d0e3774e23afd0f4a2e611d8","slug":"Dart运算符","date":"2021-12-08T07:14:50.000Z","updated":"2021-12-08T07:43:09.854Z","comments":true,"path":"api/articles/Dart运算符.json","keywords":null,"cover":null,"content":"<h2 id=\"Dart-基础语法（运算符）\"><a href=\"#Dart-基础语法（运算符）\" class=\"headerlink\" title=\"Dart 基础语法（运算符）\"></a>Dart 基础语法（运算符）</h2><p>本篇文章上接初探 Dart 语法上篇，主要涉及一些 Dart 中的运算符、异常、函数、面向对象等。</p>\n<h3 id=\"1-运算符\"><a href=\"#1-运算符\" class=\"headerlink\" title=\"1. 运算符\"></a>1. 运算符</h3><h4 id=\"1-1-算术运算符\"><a href=\"#1-1-算术运算符\" class=\"headerlink\" title=\"1.1 算术运算符\"></a><strong>1.1 算术运算符</strong></h4><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>运算符</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>加</td>\n<td>+</td>\n<td>var result = 1 + 1;</td>\n</tr>\n<tr>\n<td>减</td>\n<td>-</td>\n<td>var result = 5 - 1;</td>\n</tr>\n<tr>\n<td>乘</td>\n<td>*</td>\n<td>var result = 3 * 5;</td>\n</tr>\n<tr>\n<td>除</td>\n<td>/</td>\n<td>var result = 3 / 5; //0.6</td>\n</tr>\n<tr>\n<td>整除</td>\n<td>~/</td>\n<td>var result = 3 ~/ 5; //0</td>\n</tr>\n<tr>\n<td>取余</td>\n<td>%</td>\n<td>var result = 5 % 3; //2</td>\n</tr>\n</tbody></table>\n<h4 id=\"1-2-条件运算符\"><a href=\"#1-2-条件运算符\" class=\"headerlink\" title=\"1.2 条件运算符\"></a><strong>1.2 条件运算符</strong></h4><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>运算符</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>大于</td>\n<td>&gt;</td>\n<td>2 &gt; 1</td>\n</tr>\n<tr>\n<td>小于</td>\n<td>&lt;</td>\n<td>1 &lt; 2</td>\n</tr>\n<tr>\n<td>等于</td>\n<td>==</td>\n<td>1 == 1</td>\n</tr>\n<tr>\n<td>不等于</td>\n<td>!=</td>\n<td>3 != 4</td>\n</tr>\n<tr>\n<td>大于等于</td>\n<td>&gt;=</td>\n<td>5 &gt;= 4</td>\n</tr>\n<tr>\n<td>小于等于</td>\n<td>&lt;=</td>\n<td>4 &lt;= 5</td>\n</tr>\n</tbody></table>\n<h4 id=\"1-3-逻辑运算符\"><a href=\"#1-3-逻辑运算符\" class=\"headerlink\" title=\"1.3 逻辑运算符\"></a><strong>1.3 逻辑运算符</strong></h4><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>运算符</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>或</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>与</td>\n<td>&amp;&amp;</td>\n<td>2 &gt; 1 &amp;&amp; 3 &lt; 1</td>\n</tr>\n<tr>\n<td>非</td>\n<td>！</td>\n<td>!(2 &gt; 1)</td>\n</tr>\n</tbody></table>\n<h4 id=\"1-4-位运算符\"><a href=\"#1-4-位运算符\" class=\"headerlink\" title=\"1.4 位运算符\"></a><strong>1.4 位运算符</strong></h4><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>运算符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>位与</td>\n<td>&amp;</td>\n</tr>\n<tr>\n<td>位或</td>\n<td></td>\n</tr>\n<tr>\n<td>位非</td>\n<td>~</td>\n</tr>\n<tr>\n<td>异或</td>\n<td>^</td>\n</tr>\n<tr>\n<td>左移</td>\n<td>&lt;&lt;</td>\n</tr>\n<tr>\n<td>右移</td>\n<td>&gt;&gt;</td>\n</tr>\n</tbody></table>\n<h4 id=\"1-5-三目运算符\"><a href=\"#1-5-三目运算符\" class=\"headerlink\" title=\"1.5 三目运算符\"></a><strong>1.5 三目运算符</strong></h4><p><strong>condition ? expr1 : expr2</strong></p>\n<pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\"><span class=\"token keyword\">var</span> isOpened <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"1-6-空安全运算符\"><a href=\"#1-6-空安全运算符\" class=\"headerlink\" title=\"1.6 空安全运算符\"></a><strong>1.6 空安全运算符</strong></h4><table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>result = expr1 ?? expr2</td>\n<td>若 expr1 为 null，返回 expr2 的值，否则返回 expr1 的值</td>\n</tr>\n<tr>\n<td>expr1 ??= expr2</td>\n<td>若 expr1 为 null，则把 expr2 的值赋值给 expr1</td>\n</tr>\n<tr>\n<td>result = expr1?.value</td>\n<td>若 expr1 为 null，就返回 null，否则就返回 expr1.value 的值</td>\n</tr>\n</tbody></table>\n<p><strong>result = expr1 ?? expr2</strong></p>\n<p>如果发现 expr1 为 null，就返回 expr2 的值，否则就返回 expr1 的值</p>\n<pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\"><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> choice <span class=\"token operator\">=</span> question<span class=\"token punctuation\">.</span>choice <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//等价于</span>\n    <span class=\"token keyword\">var</span> choice2<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>question<span class=\"token punctuation\">.</span>choice <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        choice2 <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        choice2 <span class=\"token operator\">=</span> question<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>expr1 ??= expr2</strong></p>\n<p>等价于  <code>expr1 = expr1 ?? expr2</code>（转化成第一种）。</p>\n<pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\"><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> choice <span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">=</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//等价于</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>choice <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        choice <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>result = expr1?.value</strong></p>\n<p>如果 expr1 不为 null 就返回 expr1.value，否则就会返回 null，类似 Kotlin 中的  <code>?.</code>。如果 expr1 不为 null，就执行后者。</p>\n<pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\"><span class=\"token keyword\">var</span> choice <span class=\"token operator\">=</span> question<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//等价于</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>question <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> question<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nquestion<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//等价于</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>question <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//不执行 commit()</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    question<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//执行 commit 方法    </span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"1-7-级联操作符（-）\"><a href=\"#1-7-级联操作符（-）\" class=\"headerlink\" title=\"1.7 级联操作符（..）\"></a><strong>1.7 级联操作符（..）</strong></h4><p>级联操作符是  <code>..</code>，可以让你对一个对象中字段进行链式调用操作</p>\n<pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\">question\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token string\">'10001'</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>stem <span class=\"token operator\">=</span> <span class=\"token string\">'第一题: xxxxxx'</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>choices <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>hint <span class=\"token operator\">=</span> <span class=\"token string\">'听音频做题'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"1-8-运算符重载\"><a href=\"#1-8-运算符重载\" class=\"headerlink\" title=\"1.8 运算符重载\"></a><strong>1.8 运算符重载</strong></h4><p>在 Dart 支持运算符自定义重载，使用<strong>operator</strong>关键字定义重载函数。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">class Vip &#123;\n  final int level;\n  final int score;\n\n  const Vip(this.level, this.score);\n\n  bool operator &gt;(Vip other) &#x3D;&gt;\n      level &gt; other.level || (level &#x3D;&#x3D; other.level &amp;&amp; score &gt; other.score);\n\n  bool operator &lt;(Vip other) &#x3D;&gt;\n      level &lt; other.level || (level &#x3D;&#x3D; other.level &amp;&amp; score &lt; other.score);\n\n  bool operator &#x3D;&#x3D;(Vip other) &#x3D;&gt;\n      level &#x3D;&#x3D; other.level &amp;&amp;\n      score &#x3D;&#x3D; other.level; &#x2F;&#x2F;注意：这段代码可能在高版本的 Dart 中会报错，在低版本是 OK 的\n  &#x2F;&#x2F;上述代码，在高版本 Dart 中，Object 中已经重载了 &#x3D;&#x3D;，所以需要加上 covariant 关键字重写这个重载函数。\n  @override\n  bool operator &#x3D;&#x3D;(covariant Vip other) &#x3D;&gt;\n      (level &#x3D;&#x3D; other.level &amp;&amp; score &#x3D;&#x3D; other.score);\n\n  @override\n  int get hashCode &#x3D;&gt; super.hashCode; &#x2F;&#x2F;伴随着你还需要重写 hashCode，至于什么原因大家应该都知道\n&#125;\n\n\nmain() &#123;\n    var userVip1 &#x3D; Vip(4, 3500);\n    var userVip2 &#x3D; Vip(4, 1200);\n    if(userVip1 &gt; userVip2) &#123;\n        print(&#39;userVip1 is super vip&#39;);\n    &#125; else if(userVip1 &lt; userVip2) &#123;\n        print(&#39;userVip2 is super vip&#39;);\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-异常\"><a href=\"#2-异常\" class=\"headerlink\" title=\"2. 异常\"></a>2. 异常</h3><p>Dart 中的异常捕获方法和 Java、Kotlin 类似，使用的也是 try-catch-finally；对特定异常的捕获使用 on 关键字。</p>\n<p>Dart 中的常见异常有：NoSuchMethodError（当在一个对象上调用一个该对象没有 实现的函数会抛出该错误）、ArgumentError（调用函数的参数不合法会抛出这个错误）。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">main() &#123;\n  int num &#x3D; 18;\n  int result &#x3D; 0;\n  try &#123;\n    result &#x3D; num ~&#x2F; 0;\n  &#125; catch (e) &#123;&#x2F;&#x2F;捕获到 IntegerDivisionByZeroException\n    print(e.toString());\n  &#125; finally &#123;\n    print(&#39;$result&#39;);\n  &#125;\n&#125;\n\n&#x2F;&#x2F;使用 on 关键字捕获特定的异常\nmain() &#123;\n  int num &#x3D; 18;\n  int result &#x3D; 0;\n  try &#123;\n    result &#x3D; num ~&#x2F; 0;\n  &#125; on IntegerDivisionByZeroException catch (e) &#123;&#x2F;&#x2F;捕获特定异常\n    print(e.toString());\n  &#125; finally &#123;\n    print(&#39;$result&#39;);\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-函数\"><a href=\"#3-函数\" class=\"headerlink\" title=\"3. 函数\"></a>3. 函数</h3><p>在 Dart 中函数的地位一点都不亚于对象，支持闭包和高阶函数，而且 Dart 中的函数也会比 Java 要灵活的多，而且 Kotlin 中的一些函数特性，它也支持甚至比 Kotlin 支持得更全面。比如支持默认值参数、可选参数、命名参数等。</p>\n<h4 id=\"3-1-函数的基本用法\"><a href=\"#3-1-函数的基本用法\" class=\"headerlink\" title=\"3.1 函数的基本用法\"></a><strong>3.1 函数的基本用法</strong></h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">main() &#123;\n    print(&#39;sum is $&#123;sum(2, 5)&#125;&#39;);\n&#125;\n\nnum sum(num a, num b) &#123;\n    return a + b;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-2-函数参数列表传参规则\"><a href=\"#3-2-函数参数列表传参规则\" class=\"headerlink\" title=\"3.2 函数参数列表传参规则\"></a><strong>3.2 函数参数列表传参规则</strong></h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F;num a, num b, num c, num d 最普通的传参：调用时，参数个数和参数顺序必须固定\nadd1(num a, num b, num c, num d) &#123;\n  print(a + b + c + d);\n&#125;\n\n&#x2F;&#x2F;[num a, num b, num c, num d]传参：调用时，参数个数不固定，但是参数顺序需要一一对应，不支持命名参数\nadd2([num a, num b, num c, num d]) &#123;\n  print(a + b + c + d);\n&#125;\n\n&#x2F;&#x2F;&#123;num a, num b, num c, num d&#125;传参：调用时，参数个数不固定，参数顺序也可以不固定，支持命名参数，也叫可选参数，是 Dart 中的一大特性，这就是为啥 Flutter 代码那么多可选属性，大量使用可选参数\nadd3(&#123;num a, num b, num c, num d&#125;) &#123;\n  print(a + b + c + d);\n&#125;\n\n&#x2F;&#x2F;num a, num b, &#123;num c, num d&#125;传参：调用时，a、b 参数个数固定顺序固定，c、d 参数个数和顺序也可以不固定\nadd4(num a, num b, &#123;num c, num d&#125;) &#123;\n  print(a + b + c + d);\n&#125;\n\nmain() &#123;\n  add1(100, 100, 100, 100); &#x2F;&#x2F;最普通的传参：调用时，参数个数和参数顺序必须固定\n  add2(100, 100); &#x2F;&#x2F;调用时，参数个数不固定，但是参数顺序需要一一对应，不支持命名参数（也就意味着顺序不变）\n  add3(\n      b: 200,\n      a: 200,\n      c: 100,\n      d: 100); &#x2F;&#x2F;调用时，参数个数不固定，参数顺序也可以不固定，支持命名参数（也就意味着顺序可变）\n  add4(100, 100, d: 100, c: 100); &#x2F;&#x2F;调用时，a、b 参数个数固定顺序笃定，c、d 参数个数和顺序也可以不固定\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-3-函数默认参数和可选参数（以及与-Kotlin-对比）\"><a href=\"#3-3-函数默认参数和可选参数（以及与-Kotlin-对比）\" class=\"headerlink\" title=\"3.3 函数默认参数和可选参数（以及与 Kotlin 对比）\"></a><strong>3.3 函数默认参数和可选参数（以及与 Kotlin 对比）</strong></h4><p>Dart 中函数的默认值参数和可选参数和 Kotlin 中默认值参数和命名参数一致，只是写法上不同而已。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">add3(&#123;num a, num b, num c, num d &#x3D; 100&#125;) &#123;&#x2F;&#x2F;d 就是默认值参数，给的默认值是 100\n   print(a + b + c + d);\n&#125;\n\nmain() &#123;\n    add3(b: 200, a: 100, c: 800);\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>与 Kotlin 对比：</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">add3</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> d<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> c <span class=\"token operator\">+</span> d<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">add3</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token number\">800</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-4-函数类型与高阶函数\"><a href=\"#3-4-函数类型与高阶函数\" class=\"headerlink\" title=\"3.4 函数类型与高阶函数\"></a><strong>3.4 函数类型与高阶函数</strong></h4><p>在 Dart 函数也是一种类型 Function，可以作为函数参数传递，也可以作为返回值。类似 Kotlin 中的 FunctionN 系列函数。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">main() &#123;\n  Function square &#x3D; (a) &#123;\n    return a * a;\n  &#125;;\n\n  Function square2 &#x3D; (a) &#123;\n    return a * a * a;\n  &#125;;\n\n  add(3, 4, square, square2)\n&#125;\n\nnum add(num a, num b, [Function op, Function op2]) &#123;\n  &#x2F;&#x2F;函数作为参数传递\n  return op(a) + op2(b);\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-5-函数的简化以及箭头函数\"><a href=\"#3-5-函数的简化以及箭头函数\" class=\"headerlink\" title=\"3.5 函数的简化以及箭头函数\"></a><strong>3.5 函数的简化以及箭头函数</strong></h4><p>在 Dart 中的如果在函数体内只有一个表达式，那么就可以使用箭头函数来简化代码，这点也和 Kotlin 类似，只不过在 Kotlin 中人家叫 lambda 表达式，只是写法上不一样而已。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">add4(num a, num b, &#123;num c, num d&#125;) &#123;\n  print(a + b + c + d);\n&#125;\n\nadd5(num a, num b, &#123;num c, num d&#125;)  &#x3D;&gt;  print(a + b + c + d);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-面向对象\"><a href=\"#4-面向对象\" class=\"headerlink\" title=\"4. 面向对象\"></a>4. 面向对象</h3><p>在 Dart 中一切皆是对象，所以面向对象在 Dart 中依然举足轻重，下面就先通过一个简单的例子认识下 Dart 的面向对象，后续会继续深入。</p>\n<h4 id=\"4-1-类的基本定义和使用\"><a href=\"#4-1-类的基本定义和使用\" class=\"headerlink\" title=\"4.1 类的基本定义和使用\"></a><strong>4.1 类的基本定义和使用</strong></h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">abstract class Person &#123;\n    String name;\n    int age;\n    double height;\n    Person(this.name, this.age, this.height);&#x2F;&#x2F;注意，这里写法可能大家没见过， 这点和 Java 是不一样，这里实际上是一个 Dart 的语法糖。但是这里不如 Kotlin，Kotlin 是直接把 this.name 传值的过程都省了。\n    &#x2F;&#x2F;与上述的等价代码，当然这也是 Java 中必须要写的代码\n    Person(String name, int age, double height) &#123;\n        this.name &#x3D; name;\n        this.age &#x3D; age;\n        this.height &#x3D; height;\n    &#125;   \n    &#x2F;&#x2F;然而 Kotlin 很彻底只需要声明属性就行，下面是 Kotlin 实现代码\n    abstract class Person(val name: String, val age: Int, val height: Double)     \n&#125;\n\nclass Student extends Person &#123;&#x2F;&#x2F;和 Java 一样同时使用 extends 关键字表示继承\n    Student(String name, int age, double height, double grade): super(name, age, height);&#x2F;&#x2F;在 Dart 里：类名(变量,变量,...) 是构造函数的写法，:super() 表示该构造调用父类，这里构造时传入三个参数\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"4-2-类中属性的-getter-和-setter-访问器（类似-Kotlin）\"><a href=\"#4-2-类中属性的-getter-和-setter-访问器（类似-Kotlin）\" class=\"headerlink\" title=\"4.2 类中属性的 getter 和 setter 访问器（类似 Kotlin）\"></a><strong>4.2 类中属性的 getter 和 setter 访问器（类似 Kotlin）</strong></h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">abstract class Person &#123;\n  String _name; &#x2F;&#x2F;&#x2F;&#x2F;相当于 kotlin 中的 var 修饰的变量有 setter、getter 访问器，在 Dart 中没有访问权限, 默认_下划线开头变量表示私有权限，外部文件无法访问\n  final int _age;&#x2F;&#x2F;相当于 kotlin 中的 val 修饰的变量只有 getter 访问器\n  Person(this._name, this._age); &#x2F;&#x2F;这是上述简写形式\n\n  &#x2F;&#x2F;使用 set 关键字 计算属性 自定义 setter 访问器\n  set name(String name) &#x3D;&gt; _name &#x3D; name;\n  &#x2F;&#x2F;使用 get 关键字 计算属性 自定义 getter 访问器\n  bool get isStudent &#x3D;&gt; _age &gt; 18;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id><a href=\"#\" class=\"headerlink\" title></a></h3>","text":"Dart 基础语法（运算符）本篇文章上接初探 Dart 语法上篇，主要涉及一些 Dart 中的运算符、异常、函数、面向对象等。 1. 运算符1.1 算术运算符 名称 运算符 例子 加 + var result = 1 + 1; 减 - var result = 5 - 1; 乘 ...","link":"","photos":[],"count_time":{"symbolsCount":"7.8k","symbolsTime":"7 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Dart-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%EF%BC%88%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%89\"><span class=\"toc-text\">Dart 基础语法（运算符）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">1. 运算符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">1.1 算术运算符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-%E6%9D%A1%E4%BB%B6%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">1.2 条件运算符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-3-%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">1.3 逻辑运算符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-4-%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">1.4 位运算符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-5-%E4%B8%89%E7%9B%AE%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">1.5 三目运算符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-6-%E7%A9%BA%E5%AE%89%E5%85%A8%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">1.6 空安全运算符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-7-%E7%BA%A7%E8%81%94%E6%93%8D%E4%BD%9C%E7%AC%A6%EF%BC%88-%EF%BC%89\"><span class=\"toc-text\">1.7 级联操作符（..）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-8-%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD\"><span class=\"toc-text\">1.8 运算符重载</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%BC%82%E5%B8%B8\"><span class=\"toc-text\">2. 异常</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">3. 函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-%E5%87%BD%E6%95%B0%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">3.1 函数的基本用法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8%E4%BC%A0%E5%8F%82%E8%A7%84%E5%88%99\"><span class=\"toc-text\">3.2 函数参数列表传参规则</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-%E5%87%BD%E6%95%B0%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0%E5%92%8C%E5%8F%AF%E9%80%89%E5%8F%82%E6%95%B0%EF%BC%88%E4%BB%A5%E5%8F%8A%E4%B8%8E-Kotlin-%E5%AF%B9%E6%AF%94%EF%BC%89\"><span class=\"toc-text\">3.3 函数默认参数和可选参数（以及与 Kotlin 对比）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-4-%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B%E4%B8%8E%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">3.4 函数类型与高阶函数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-5-%E5%87%BD%E6%95%B0%E7%9A%84%E7%AE%80%E5%8C%96%E4%BB%A5%E5%8F%8A%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">3.5 函数的简化以及箭头函数</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">4. 面向对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-1-%E7%B1%BB%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%AE%9A%E4%B9%89%E5%92%8C%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">4.1 类的基本定义和使用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-%E7%B1%BB%E4%B8%AD%E5%B1%9E%E6%80%A7%E7%9A%84-getter-%E5%92%8C-setter-%E8%AE%BF%E9%97%AE%E5%99%A8%EF%BC%88%E7%B1%BB%E4%BC%BC-Kotlin%EF%BC%89\"><span class=\"toc-text\">4.2 类中属性的 getter 和 setter 访问器（类似 Kotlin）</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\"></span></a></li></ol></li></ol>","author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Dart函数","uid":"1e44f5b3bd24c99dd3f8c314188c1ad6","slug":"Dart函数","date":"2021-12-08T07:42:51.000Z","updated":"2021-12-08T07:42:51.179Z","comments":true,"path":"api/articles/Dart函数.json","keywords":null,"cover":null,"text":"","link":"","photos":[],"count_time":{"symbolsCount":0,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Dart基础语法总结","uid":"b31cd86eb2d45436159ffec7e16dc297","slug":"Dart基础语法总结","date":"2021-12-08T05:36:37.000Z","updated":"2021-12-17T02:22:01.711Z","comments":true,"path":"api/articles/Dart基础语法总结.json","keywords":null,"cover":null,"text":"Dart 基本输出操作void main() &#123; print('Hello World!');//注意：Dart 和 Java 一样表达式以分号结尾，写习惯 Kotlin 的小伙伴需要注意了，这可能是你从 Kotlin 转 Dart 最大不适之一。 &#125; //D...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"11 mins."},"categories":[],"tags":[{"name":"Flutter","slug":"Flutter","count":1,"path":"api/tags/Flutter.json"}],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}