{"title":"单元测试","uid":"78bacd8b33e55bbfb6a2cbf684cbf20b","slug":"unit-test","date":"2021-07-13T03:32:17.000Z","updated":"2021-07-14T07:45:20.214Z","comments":true,"path":"api/articles/unit-test.json","keywords":null,"cover":null,"content":"<h4 id=\"别测试代码，而应该验证程序的行为\"><a href=\"#别测试代码，而应该验证程序的行为\" class=\"headerlink\" title=\"别测试代码，而应该验证程序的行为\"></a>别测试代码，而应该验证程序的行为</h4><p>测试应该只在程序的<strong>行为和预期的不一样</strong>时，才不通过。测试应该测试程序的代码做了什么，而不是测试程序如何实现。</p>\n<ul>\n<li>验证应用程序做了什么的，叫做<strong>行为测试</strong>。</li>\n<li>即使应用程序的行为不发生变化，只要应用程序的代码发生了变化，测试就不通过的，叫做<strong>脆性测试</strong>。</li>\n</ul>\n<p>假设我们有一个香蕉数据库，叫做 <code>GorillaDB</code>。<code>GorillaDB</code> 是一个以键－值对来储存香蕉的数据库。我们可以用这样的方式储存香蕉：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> database <span class=\"token operator\">=</span> <span class=\"token function\">GorillaDB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> banana <span class=\"token operator\">=</span> <span class=\"token function\">Banana</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ndatabase<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>banana<span class=\"token punctuation\">:</span> banana<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">:</span> <span class=\"token string\">\"my-banana\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>之后可以从数据库里取回香蕉：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> banana <span class=\"token operator\">=</span> database<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">:</span> <span class=\"token string\">\"my-banana\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"行为测试\"><a href=\"#行为测试\" class=\"headerlink\" title=\"行为测试\"></a>行为测试</h4><p>编写行为测试的关键，就是准确的定位你想让你的程序代码做什么。</p>\n<p>在我们的 <code>testSave_savesTheBananaToTheDatabase</code> 的测试中：当我们在数据库中储存一根香蕉时，我们所希望程序完成的是一个怎样的行为呢？应该是保存香蕉，即之后可以取回香蕉。因此，我们不该测试数据库大小的增加，而应该测试我们能不能从数据库里取回香蕉。</p>\n<p><strong>编写行为测试的关键，就在于思考这些问题：</strong></p>\n<ul>\n<li>这段程序代码是用来做什么的？</li>\n<li>我的测试只验证了程序的行为吗？它可能因为代码运行的其他原因而不通过吗？</li>\n</ul>\n<h4 id=\"Nimber-断言\"><a href=\"#Nimber-断言\" class=\"headerlink\" title=\"Nimber 断言\"></a>Nimber 断言</h4><pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span><span class=\"token function\">beCloseTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.1</span><span class=\"token punctuation\">,</span> within<span class=\"token punctuation\">:</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">2</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"seahorse\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span><span class=\"token function\">contain</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sea\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"Atlantic\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Pacific\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toNot</span><span class=\"token punctuation\">(</span><span class=\"token function\">contain</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mississippi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>ocean<span class=\"token punctuation\">.</span>isClean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEventually</span><span class=\"token punctuation\">(</span><span class=\"token function\">beTruthy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"用-Quick-例子和例子群组织测试\"><a href=\"#用-Quick-例子和例子群组织测试\" class=\"headerlink\" title=\"用 Quick 例子和例子群组织测试\"></a>用 Quick 例子和例子群组织测试</h4><p>Quick 使用特殊的语法定义<strong>例子（examples）和例子群（example groups）</strong>。</p>\n<p>在*<a href=\"https://github.com/Quick/Quick/blob/main/Documentation/zh-cn/ArrangeActAssert.md\">编写高效的 XCTest 测试: Arrange，Act 和 Assert</a>*，我们了解了一个好的测试方法名称是至关重要的，尤其是当测试失败时。它能够帮助我们判断是修改程序代码或者是更新测试内容。</p>\n<p><strong>Quick 的例子和例子群主要有两个目的：</strong></p>\n<ol>\n<li>它们促使你使用具有描述性的测试名称。</li>\n<li>它们极大地简化了 Arrange 步骤的测试代码。</li>\n</ol>\n<h2 id=\"例子：使用-it\"><a href=\"#例子：使用-it\" class=\"headerlink\" title=\"例子：使用 it\"></a>例子：使用 <code>it</code></h2><p>定义了 <code>it</code> 函数的例子，使用断言代码指明了程序应有的行为。这些就像 XCTest 中的测试方法一样。</p>\n<p><code>it</code> 函数有两个参数：例子的名称和闭包。下面这个例子具体说明了 <code>Sea.Dolphin</code> 类应有的行为。 一只新的海豚（dolphin）应该是聪明（smart）且友好（friendly）的：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token comment\">// Swift</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">Quick</span>\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">Nimble</span>\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">Sea</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DolphinSpec</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">QuickSpec</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function\">spec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"is friendly\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">Dolphin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>isFriendly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span><span class=\"token function\">beTruthy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"is smart\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">Dolphin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>isSmart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span><span class=\"token function\">beTruthy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// Objective-C</span>\n\n@<span class=\"token keyword\">import</span> <span class=\"token builtin\">Quick</span><span class=\"token punctuation\">;</span>\n@<span class=\"token keyword\">import</span> <span class=\"token builtin\">Nimble</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">QuickSpecBegin</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">DolphinSpec</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span>@<span class=\"token string\">\"is friendly\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">^</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>@<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">Dolphin</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">]</span> isFriendly<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span><span class=\"token function\">beTruthy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span>@<span class=\"token string\">\"is smart\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">^</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>@<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">Dolphin</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">]</span> isSmart<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span><span class=\"token function\">beTruthy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">QuickSpecEnd</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>用描述性的语言使例子所测试的内容清晰明了。 描述性的语言可以是任意长度、任意字符的，涵盖了英语以及其他语言的字符，甚至可以是表情符号！✌️ 😎</p>\n<h2 id=\"例子群：使用-describe-和-context\"><a href=\"#例子群：使用-describe-和-context\" class=\"headerlink\" title=\"例子群：使用 describe 和 context\"></a>例子群：使用 <code>describe</code> 和 <code>context</code></h2><p>例子群是按一定逻辑关系组织的例子。例子群里可以共享配置（setup）和卸载（teardown）代码。</p>\n<h3 id=\"使用-describe-描述类和方法\"><a href=\"#使用-describe-描述类和方法\" class=\"headerlink\" title=\"使用 describe 描述类和方法\"></a>使用 <code>describe</code> 描述类和方法</h3><p>为了具体说明 <code>Dolphin</code> 类中 <code>click</code> 方法的行为 —— 换句话说，为了验证这个方法可用 —— 我们可以把多个 <code>it</code> 例子用 <code>describe</code> 函数组织成为一个群。把相同的例子组织在一起能更方便阅读：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token comment\">// Swift</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">Quick</span>\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">Nimble</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DolphinSpec</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">QuickSpec</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function\">spec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a dolphin\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"its click\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"is loud\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">let</span> click <span class=\"token operator\">=</span> <span class=\"token function\">Dolphin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>click<span class=\"token punctuation\">.</span>isLoud<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span><span class=\"token function\">beTruthy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"has a high frequency\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">let</span> click <span class=\"token operator\">=</span> <span class=\"token function\">Dolphin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>click<span class=\"token punctuation\">.</span>hasHighFrequency<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span><span class=\"token function\">beTruthy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// Objective-C</span>\n\n@<span class=\"token keyword\">import</span> <span class=\"token builtin\">Quick</span><span class=\"token punctuation\">;</span>\n@<span class=\"token keyword\">import</span> <span class=\"token builtin\">Nimble</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">QuickSpecBegin</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">DolphinSpec</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span>@<span class=\"token string\">\"a dolphin\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">^</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">describe</span><span class=\"token punctuation\">(</span>@<span class=\"token string\">\"its click\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">^</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span>@<span class=\"token string\">\"is loud\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">^</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token builtin\">Click</span> <span class=\"token operator\">*</span>click <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">Dolphin</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">]</span> click<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>@<span class=\"token punctuation\">(</span>click<span class=\"token punctuation\">.</span>isLoud<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span><span class=\"token function\">beTruthy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span>@<span class=\"token string\">\"has a high frequency\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">^</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token builtin\">Click</span> <span class=\"token operator\">*</span>click <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">Dolphin</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">]</span> click<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>@<span class=\"token punctuation\">(</span>click<span class=\"token punctuation\">.</span>hasHighFrequency<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span><span class=\"token function\">beTruthy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">QuickSpecEnd</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>当这两个例子在 Xcode 中运行的时候，它们会从 <code>describe</code> 和 <code>it</code> 函数中输出一些描述性的语言：</p>\n<ol>\n<li><code>DolphinSpec.a_dolphin_its_click_is_loud</code></li>\n<li><code>DolphinSpec.a_dolphin_its_click_has_a_high_frequency</code></li>\n</ol>\n<p>显然，这两个测试各自测试的内容都很清晰明了。</p>\n<h3 id=\"使用-beforeEach-和-afterEach-共享配置／卸载代码\"><a href=\"#使用-beforeEach-和-afterEach-共享配置／卸载代码\" class=\"headerlink\" title=\"使用 beforeEach 和 afterEach 共享配置／卸载代码\"></a>使用 <code>beforeEach</code> 和 <code>afterEach</code> 共享配置／卸载代码</h3><p>例子群不仅使它包含的例子更清晰易懂，还有助于在群里共享配置和卸载的代码。</p>\n<p>在下面的这个示例里，例子群中的每一个例子前面，都用 <code>beforeEach</code> 这个函数创建一种新类型的海豚以及它特定的叫声。 这就保证了对每个例子进行了初始化：</p>\n<pre class=\"line-numbers language-objective-c\" data-language=\"objective-c\"><code class=\"language-objective-c\">&#x2F;&#x2F; Swift\n\nimport Quick\nimport Nimble\n\nclass DolphinSpec: QuickSpec &#123;\n  override func spec() &#123;\n    describe(&quot;a dolphin&quot;) &#123;\n      var dolphin: Dolphin!\n      beforeEach &#123;\n        dolphin &#x3D; Dolphin()\n      &#125;\n\n      describe(&quot;its click&quot;) &#123;\n        var click: Click!\n        beforeEach &#123;\n          click &#x3D; dolphin.click()\n        &#125;\n\n        it(&quot;is loud&quot;) &#123;\n          expect(click.isLoud).to(beTruthy())\n        &#125;\n\n        it(&quot;has a high frequency&quot;) &#123;\n          expect(click.hasHighFrequency).to(beTruthy())\n        &#125;\n      &#125;\n    &#125;\n  &#125;\n&#125;\n&#x2F;&#x2F; Objective-C\n\n@import Quick;\n@import Nimble;\n\nQuickSpecBegin(DolphinSpec)\n\ndescribe(@&quot;a dolphin&quot;, ^&#123;\n  __block Dolphin *dolphin &#x3D; nil;\n  beforeEach(^&#123;\n      dolphin &#x3D; [Dolphin new];\n  &#125;);\n\n  describe(@&quot;its click&quot;, ^&#123;\n    __block Click *click &#x3D; nil;\n    beforeEach(^&#123;\n      click &#x3D; [dolphin click];\n    &#125;);\n\n    it(@&quot;is loud&quot;, ^&#123;\n      expect(@(click.isLoud)).to(beTruthy());\n    &#125;);\n\n    it(@&quot;has a high frequency&quot;, ^&#123;\n      expect(@(click.hasHighFrequency)).to(beTruthy());\n    &#125;);\n  &#125;);\n&#125;);\n\nQuickSpecEnd<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对于海豚这个例子来说，像这样共享配置代码并不是一个很大的工程。但是对于更复杂的对象，共享代码能够省去大量写代码的时间！</p>\n<p>如果想在每个例子后面执行特定的代码，可以使用 <code>afterEach</code>。</p>\n<h3 id=\"使用-context-指定条件的行为\"><a href=\"#使用-context-指定条件的行为\" class=\"headerlink\" title=\"使用 context 指定条件的行为\"></a>使用 <code>context</code> 指定条件的行为</h3><p>海豚使用叫声进行回声定位。当接近了它们感兴趣的东西时，海豚会发出一系列的超声波对其进行更准确的探测。</p>\n<p>这个测试需要展示在不同环境下，<code>click</code> 方法的不同行为。通常，海豚只叫（click）一声。但是当海豚接近它们感兴趣的东西时，它会发出很多次叫声。</p>\n<p>这种情况可以用 <code>context</code> 函数来表示：一个 <code>context</code> 代表正常情况，另一个 <code>context</code> 代表海豚接近感兴趣的东西：</p>\n<pre class=\"line-numbers language-objective-c\" data-language=\"objective-c\"><code class=\"language-objective-c\">&#x2F;&#x2F; Swift\n\nimport Quick\nimport Nimble\n\nclass DolphinSpec: QuickSpec &#123;\n  override func spec() &#123;\n    describe(&quot;a dolphin&quot;) &#123;\n      var dolphin: Dolphin!\n      beforeEach &#123; dolphin &#x3D; Dolphin() &#125;\n\n      describe(&quot;its click&quot;) &#123;\n        context(&quot;when the dolphin is not near anything interesting&quot;) &#123;\n          it(&quot;is only emitted once&quot;) &#123;\n            expect(dolphin.click().count).to(equal(1))\n          &#125;\n        &#125;\n\n        context(&quot;when the dolphin is near something interesting&quot;) &#123;\n          beforeEach &#123;\n            let ship &#x3D; SunkenShip()\n            Jamaica.dolphinCove.add(ship)\n            Jamaica.dolphinCove.add(dolphin)\n          &#125;\n\n          it(&quot;is emitted three times&quot;) &#123;\n            expect(dolphin.click().count).to(equal(3))\n          &#125;\n        &#125;\n      &#125;\n    &#125;\n  &#125;\n&#125;\n&#x2F;&#x2F; Objective-C\n\n@import Quick;\n@import Nimble;\n\nQuickSpecBegin(DolphinSpec)\n\ndescribe(@&quot;a dolphin&quot;, ^&#123;\n  __block Dolphin *dolphin &#x3D; nil;\n  beforeEach(^&#123; dolphin &#x3D; [Dolphin new]; &#125;);\n\n  describe(@&quot;its click&quot;, ^&#123;\n    context(@&quot;when the dolphin is not near anything interesting&quot;, ^&#123;\n      it(@&quot;is only emitted once&quot;, ^&#123;\n        expect(@([[dolphin click] count])).to(equal(@1));\n      &#125;);\n    &#125;);\n\n    context(@&quot;when the dolphin is near something interesting&quot;, ^&#123;\n      beforeEach(^&#123;\n        [[Jamaica dolphinCove] add:[SunkenShip new]];\n        [[Jamaica dolphinCove] add:dolphin];\n      &#125;);\n\n      it(@&quot;is emitted three times&quot;, ^&#123;\n        expect(@([[dolphin click] count])).to(equal(@3));\n      &#125;);\n    &#125;);\n  &#125;);\n&#125;);\n\nQuickSpecEnd<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>严格地说，<code>context</code> 是 <code>describe</code> 的一种同义的表达，但是像这样有目的地使用能够让你的代码更容易理解。</p>\n<h3 id=\"测试的可读性：Quick-和-XCTest\"><a href=\"#测试的可读性：Quick-和-XCTest\" class=\"headerlink\" title=\"测试的可读性：Quick 和 XCTest\"></a>测试的可读性：Quick 和 XCTest</h3><p>在*<a href=\"https://github.com/Quick/Quick/blob/main/Documentation/zh-cn/ArrangeActAssert.md\">编写高效的 XCTest 测试: Arrange，Act 和 Assert</a>*里，我们知道了对每种情况进行一个测试能够很方便地组织测试代码。 在 XCTest 里，这样做会导致出现冗长的测试方法名称：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">func testDolphin_click_whenTheDolphinIsNearSomethingInteresting_isEmittedThreeTimes() &#123;\n  &#x2F;&#x2F; ...\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>使用 Quick ，每种情况会更容易阅读，并且我们能够为每一个例子群进行配置：</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a dolphin\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"its click\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">context</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"when the dolphin is near something interesting\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"is emitted three times\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// ...</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"临时禁用例子或例子群\"><a href=\"#临时禁用例子或例子群\" class=\"headerlink\" title=\"临时禁用例子或例子群\"></a>临时禁用例子或例子群</h2><p>你可以临时禁用那些测试不通过的例子和例子群。 这些例子的名称会随着测试结果一起打印在控制台里，但它们并不运行。</p>\n<p>通过添加前缀 <code>x</code> 就能禁用例子或例子群：</p>\n<pre class=\"line-numbers language-objective-c\" data-language=\"objective-c\"><code class=\"language-objective-c\">&#x2F;&#x2F; Swift\n\nxdescribe(&quot;its click&quot;) &#123;\n  &#x2F;&#x2F; ...none of the code in this closure will be run.\n&#125;\n\nxcontext(&quot;when the dolphin is not near anything interesting&quot;) &#123;\n  &#x2F;&#x2F; ...none of the code in this closure will be run.\n&#125;\n\nxit(&quot;is only emitted once&quot;) &#123;\n  &#x2F;&#x2F; ...none of the code in this closure will be run.\n&#125;\n&#x2F;&#x2F; Objective-C\n\nxdescribe(@&quot;its click&quot;, ^&#123;\n  &#x2F;&#x2F; ...none of the code in this closure will be run.\n&#125;);\n\nxcontext(@&quot;when the dolphin is not near anything interesting&quot;, ^&#123;\n  &#x2F;&#x2F; ...none of the code in this closure will be run.\n&#125;);\n\nxit(@&quot;is only emitted once&quot;, ^&#123;\n  &#x2F;&#x2F; ...none of the code in this closure will be run.\n&#125;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"临时运行一部分例子\"><a href=\"#临时运行一部分例子\" class=\"headerlink\" title=\"临时运行一部分例子\"></a>临时运行一部分例子</h2><p>在某些情况下，只关注一个或几个例子有助于测试。毕竟只运行一两个例子比运行整个测试快多了。通过使用 <code>fit</code> 函数，你可以只运行一两个例子。你还可以使用 <code>fdescribe</code> 或 <code>fcontext</code> 把测试重点放在一个例子群：</p>\n<pre class=\"line-numbers language-objective-c\" data-language=\"objective-c\"><code class=\"language-objective-c\">fit(&quot;is loud&quot;) &#123;\n  &#x2F;&#x2F; ...only this focused example will be run.\n&#125;\n\nit(&quot;has a high frequency&quot;) &#123;\n  &#x2F;&#x2F; ...this example is not focused, and will not be run.\n&#125;\n\nfcontext(&quot;when the dolphin is near something interesting&quot;) &#123;\n  &#x2F;&#x2F; ...examples in this group are also focused, so they&#39;ll be run.\n&#125;\nfit(@&quot;is loud&quot;, &#123;\n  &#x2F;&#x2F; ...only this focused example will be run.\n&#125;);\n\nit(@&quot;has a high frequency&quot;, ^&#123;\n  &#x2F;&#x2F; ...this example is not focused, and will not be run.\n&#125;);\n\nfcontext(@&quot;when the dolphin is near something interesting&quot;, ^&#123;\n  &#x2F;&#x2F; ...examples in this group are also focused, so they&#39;ll be run.\n&#125;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"使用-beforeSuite-和-afterSuite-进行全局配置／卸载\"><a href=\"#使用-beforeSuite-和-afterSuite-进行全局配置／卸载\" class=\"headerlink\" title=\"使用 beforeSuite 和 afterSuite 进行全局配置／卸载\"></a>使用 <code>beforeSuite</code> 和 <code>afterSuite</code> 进行全局配置／卸载</h2><p>有一些测试的配置需要在所有例子运行之前进行。对于这种情况，可以使用 <code>beforeSuite</code> 和 <code>afterSuite</code> 。</p>\n<p>下面的示例展示了在所有其他例子运行之前，创建一个包含了海洋中所有生物的数据库。当所有例子运行结束的时候，这个数据库就被卸载：</p>\n<pre class=\"line-numbers language-objective-c\" data-language=\"objective-c\"><code class=\"language-objective-c\">&#x2F;&#x2F; Swift\n\nimport Quick\n\nclass DolphinSpec: QuickSpec &#123;\n  override func spec() &#123;\n    beforeSuite &#123;\n      OceanDatabase.createDatabase(name: &quot;test.db&quot;)\n      OceanDatabase.connectToDatabase(name: &quot;test.db&quot;)\n    &#125;\n\n    afterSuite &#123;\n      OceanDatabase.teardownDatabase(name: &quot;test.db&quot;)\n    &#125;\n\n    describe(&quot;a dolphin&quot;) &#123;\n      &#x2F;&#x2F; ...\n    &#125;\n  &#125;\n&#125;\n&#x2F;&#x2F; Objective-C\n\n@import Quick;\n\nQuickSpecBegin(DolphinSpec)\n\nbeforeSuite(^&#123;\n  [OceanDatabase createDatabase:@&quot;test.db&quot;];\n  [OceanDatabase connectToDatabase:@&quot;test.db&quot;];\n&#125;);\n\nafterSuite(^&#123;\n  [OceanDatabase teardownDatabase:@&quot;test.db&quot;];\n&#125;);\n\ndescribe(@&quot;a dolphin&quot;, ^&#123;\n  &#x2F;&#x2F; ...\n&#125;);\n\nQuickSpecEnd<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>你可以添加多个 <code>beforeSuite</code> 和 <code>afterSuite</code> 。所有的 <code>beforeSuite</code> 闭包都会在其它测试运行前执行，同样，所有的 <code>afterSuite</code> 闭包都会在其它测试运行结束后执行。 但是这些闭包并不一定按先后顺序执行。</p>\n<h4 id=\"访问当前例子的元数据\"><a href=\"#访问当前例子的元数据\" class=\"headerlink\" title=\"访问当前例子的元数据\"></a>访问当前例子的元数据</h4><p>在某些情况下，你会想知道当前运行的例子的名称，或者目前已经运行了多少例子。Quick 提供了闭包 <code>beforeEach</code> 和 <code>afterEach</code> ，通过这些闭包，可以访问元数据。</p>\n<pre class=\"line-numbers language-objective-c\" data-language=\"objective-c\"><code class=\"language-objective-c\">beforeEach &#123; exampleMetadata in\n  println(&quot;Example number \\(exampleMetadata.exampleIndex) is about to be run.&quot;)\n&#125;\n\nafterEach &#123; exampleMetadata in\n  println(&quot;Example number \\(exampleMetadata.exampleIndex) has run.&quot;)\n&#125;\nbeforeEachWithMetadata(^(ExampleMetadata *exampleMetadata)&#123;\n  NSLog(@&quot;Example number %l is about to be run.&quot;, (long)exampleMetadata.exampleIndex);\n&#125;);\n\nafterEachWithMetadata(^(ExampleMetadata *exampleMetadata)&#123;\n  NSLog(@&quot;Example number %l has run.&quot;, (long)exampleMetadata.exampleIndex);\n&#125;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"Nimber-断言函数\"><a href=\"#Nimber-断言函数\" class=\"headerlink\" title=\"Nimber 断言函数\"></a>Nimber 断言函数</h4><p>列举Nimble中的匹配函数</p>\n<p>用途    函数<br>等值判断<br>使用equal函数</p>\n<p>expect(actual).to(equal(expected))</p>\n<p>expect(actual) == expected</p>\n<p>expect(actual) != expected</p>\n<p>是否是同一个对象</p>\n<p>使用beIdenticalTo函数</p>\n<p>expect(actual).to(beIdenticalTo(expected))</p>\n<p>expect(actual) === expected</p>\n<p>expect(actual) !== expected</p>\n<p>比较<br>expect(actual).to(beLessThan(expected))</p>\n<p>expect(actual) &lt; expected</p>\n<p>expect(actual).to(beLessThanOrEqualTo(expected))</p>\n<p>expect(actual) &lt;= expected</p>\n<p>expect(actual).to(beGreaterThan(expected))</p>\n<p>expect(actual) &gt; expected</p>\n<p>expect(actual).to(beGreaterThanOrEqualTo(expected)) expect(actual) &gt;= expected</p>\n<p>比较浮点数<br>expect(10.01).to(beCloseTo(10, within: 0.1))</p>\n<p>类型检查</p>\n<p>expect(instance).to(beAnInstanceOf(aClass)) expect(instance).to(beAKindOf(aClass))</p>\n<p>是否为真</p>\n<p>// Passes if actual is not nil, true, or an object with a boolean value of true:</p>\n<p>expect(actual).to(beTruthy())</p>\n<p>// Passes if actual is only true (not nil or an object conforming to BooleanType true):</p>\n<p>expect(actual).to(beTrue())</p>\n<p>// Passes if actual is nil, false, or an object with a boolean value of false:</p>\n<p>expect(actual).to(beFalsy())</p>\n<p>// Passes if actual is only false (not nil or an object conforming to BooleanType false):</p>\n<p>expect(actual).to(beFalse())</p>\n<p>// Passes if actual is nil:</p>\n<p>expect(actual).to(beNil())</p>\n<p>是否有异常</p>\n<p>// Passes if actual, when evaluated, raises an exception: expect(actual).to(raiseException())</p>\n<p>// Passes if actual raises an exception with the given name:</p>\n<p>expect(actual).to(raiseException(named: name))</p>\n<p>// Passes if actual raises an exception with the given name and reason:</p>\n<p>expect(actual).to(raiseException(named: name, reason: reason))</p>\n<p>// Passes if actual raises an exception and it passes expectations in the block</p>\n<p>// (in this case, if name begins with ‘a r’)</p>\n<p>expect { exception.raise() }.to(raiseException { (exception: NSException) in</p>\n<pre><code> expect(exception.name).to(beginWith(&quot;a r&quot;))\n</code></pre>\n<p>})</p>\n<p>集合关系</p>\n<p>// Passes if all of the expected values are members of actual:</p>\n<p>expect(actual).to(contain(expected…))</p>\n<p>expect([“whale”, “dolphin”, “starfish”]).to(contain(“dolphin”, “starfish”))</p>\n<p>// Passes if actual is an empty collection (it contains no elements):</p>\n<p>expect(actual).to(beEmpty())</p>\n<p>字符串</p>\n<p>// Passes if actual contains substring expected: expect(actual).to(contain(expected))</p>\n<p>// Passes if actual begins with substring: expect(actual).to(beginWith(expected))</p>\n<p>// Passes if actual ends with substring: expect(actual).to(endWith(expected))</p>\n<p>// Passes if actual is an empty string, “”: expect(actual).to(beEmpty())</p>\n<p>// Passes if actual matches the regular expression defined in expected:</p>\n<p>expect(actual).to(match(expected))</p>\n<p>检查集合中的所有元素是否符合条件</p>\n<p>// with a custom function:</p>\n<p>expect([1,2,3,4]).to(allPass({$0 &lt; 5}))</p>\n<p>// with another matcher: expect([1,2,3,4]).to(allPass(beLessThan(5)))</p>\n<p>检查集合个数</p>\n<p>expect(actual).to(haveCount(expected))</p>\n<p>匹配任意一种检查</p>\n<p>// passes if actual is either less than 10 or greater than 20 expect(actual).to(satisfyAnyOf(beLessThan(10), beGreaterThan(20)))</p>\n<p>// can include any number of matchers – the following will pass</p>\n<p>expect(6).to(satisfyAnyOf(equal(2), equal(3), equal(4), equal(5), equal(6), equal(7)))</p>\n<p>// in Swift you also have the option to use the || operator to achieve a similar function expect(82).to(beLessThan(50) || beGreaterThan(80))</p>\n<p>————————————————</p>\n","text":"别测试代码，而应该验证程序的行为测试应该只在程序的行为和预期的不一样时，才不通过。测试应该测试程序的代码做了什么，而不是测试程序如何实现。 验证应用程序做了什么的，叫做行为测试。 即使应用程序的行为不发生变化，只要应用程序的代码发生了变化，测试就不通过的，叫做脆性测试。 假设我们...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[],"tags":[{"name":"单元测试","slug":"单元测试","count":1,"path":"api/tags/单元测试.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%AB%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81%EF%BC%8C%E8%80%8C%E5%BA%94%E8%AF%A5%E9%AA%8C%E8%AF%81%E7%A8%8B%E5%BA%8F%E7%9A%84%E8%A1%8C%E4%B8%BA\"><span class=\"toc-text\">别测试代码，而应该验证程序的行为</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A1%8C%E4%B8%BA%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">行为测试</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Nimber-%E6%96%AD%E8%A8%80\"><span class=\"toc-text\">Nimber 断言</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%94%A8-Quick-%E4%BE%8B%E5%AD%90%E5%92%8C%E4%BE%8B%E5%AD%90%E7%BE%A4%E7%BB%84%E7%BB%87%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">用 Quick 例子和例子群组织测试</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BE%8B%E5%AD%90%EF%BC%9A%E4%BD%BF%E7%94%A8-it\"><span class=\"toc-text\">例子：使用 it</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BE%8B%E5%AD%90%E7%BE%A4%EF%BC%9A%E4%BD%BF%E7%94%A8-describe-%E5%92%8C-context\"><span class=\"toc-text\">例子群：使用 describe 和 context</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-describe-%E6%8F%8F%E8%BF%B0%E7%B1%BB%E5%92%8C%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">使用 describe 描述类和方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-beforeEach-%E5%92%8C-afterEach-%E5%85%B1%E4%BA%AB%E9%85%8D%E7%BD%AE%EF%BC%8F%E5%8D%B8%E8%BD%BD%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">使用 beforeEach 和 afterEach 共享配置／卸载代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-context-%E6%8C%87%E5%AE%9A%E6%9D%A1%E4%BB%B6%E7%9A%84%E8%A1%8C%E4%B8%BA\"><span class=\"toc-text\">使用 context 指定条件的行为</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95%E7%9A%84%E5%8F%AF%E8%AF%BB%E6%80%A7%EF%BC%9AQuick-%E5%92%8C-XCTest\"><span class=\"toc-text\">测试的可读性：Quick 和 XCTest</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%B4%E6%97%B6%E7%A6%81%E7%94%A8%E4%BE%8B%E5%AD%90%E6%88%96%E4%BE%8B%E5%AD%90%E7%BE%A4\"><span class=\"toc-text\">临时禁用例子或例子群</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%B4%E6%97%B6%E8%BF%90%E8%A1%8C%E4%B8%80%E9%83%A8%E5%88%86%E4%BE%8B%E5%AD%90\"><span class=\"toc-text\">临时运行一部分例子</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-beforeSuite-%E5%92%8C-afterSuite-%E8%BF%9B%E8%A1%8C%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%EF%BC%8F%E5%8D%B8%E8%BD%BD\"><span class=\"toc-text\">使用 beforeSuite 和 afterSuite 进行全局配置／卸载</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AE%BF%E9%97%AE%E5%BD%93%E5%89%8D%E4%BE%8B%E5%AD%90%E7%9A%84%E5%85%83%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">访问当前例子的元数据</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Nimber-%E6%96%AD%E8%A8%80%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">Nimber 断言函数</span></a></li></ol>","author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"iOS设计模式（一）","uid":"69226c43fa619d7df7756bf099da8b7a","slug":"iOS设计模式（一）","date":"2021-09-30T12:30:53.000Z","updated":"2021-10-01T01:00:07.655Z","comments":true,"path":"api/articles/iOS设计模式（一）.json","keywords":null,"cover":[],"text":"类继承和对象组合 类继承简单直接、硬卧关系在编译静态定义 被复用的实现易于修改 缺点： 因为类继承在编译时定义、所以无法在运行时进行变更从父类继承来的实现 子类描述在父类、 子类直接面对父类的封装、因此破坏了封装 父类实现的任何变更都会强制爱子类到的变更 因为在新的问题场景下京城...","link":"","photos":[],"count_time":{"symbolsCount":471,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"iOS 组件化拆分总结","uid":"08c633a5de2fe3edfdf41cfdec1b1bae","slug":"iOS-component","date":"2021-06-11T08:05:51.000Z","updated":"2021-10-01T12:36:38.941Z","comments":true,"path":"api/articles/iOS-component.json","keywords":null,"cover":"https://images.xiaozhuanlan.com/photo/2019/0156fea8cc60760bdf6d2bd4229514d1.png","text":"组件化一、为何要组件化? 这是我们在做组件化的时候要思考的，它的优点和缺点是什么，这样我们对组件化有个基本认识 1. 组件化定义 组件是由一个或多个类构成，能完整描述一个业务场景，并能被其他业务场景复用的功能单位。 比如内存，硬盘，CPU，显示器等，拿出其中任何一个部件都能被其他...","link":"","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"18 mins."},"categories":[],"tags":[{"name":"组件化","slug":"组件化","count":1,"path":"api/tags/组件化.json"}],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}