{"title":"category","uid":"e277b81e144e00ba0580f618a83681f9","slug":"category","date":"2021-04-24T02:46:35.000Z","updated":"2021-04-25T11:42:24.086Z","comments":true,"path":"api/articles/category.json","keywords":null,"cover":[],"content":"<img src=\"/post/category/Category01.png\" class>\n\n<h4 id=\"类别（新）\"><a href=\"#类别（新）\" class=\"headerlink\" title=\"类别（新）\"></a>类别（新）</h4><blockquote>\n<p>类别的设计体现了面向对象的核心原则，即开放封闭原则（Open Closed Principle，OCP）。对扩展开放，对修改封闭，从而降低代码的耦合度。</p>\n</blockquote>\n<p><strong>类别（Category）与继承（Inheritance）的区别如下：</strong></p>\n<ul>\n<li>子类继承是进行类扩展的另一种常用方法，当然基于子类继承的扩展更加自由、正式，既可以新增属性，也可以新增方法。</li>\n<li>类别可以在不获悉、不改变原来代码的情况下往里面添加新的方法，但也只能添加方法，不能添加属性，<code>属于功能上的扩展</code>。</li>\n<li>相对于子类继承扩展，类别的另一明显优势就是实现了功能的局部化封装，<code>扩展的功能只会在本类被引用时看到</code></li>\n</ul>\n<p><strong><code>类别与类扩展的区别如下：</code></strong></p>\n<ul>\n<li>类别和类扩展的明显区别在于，类扩展可以添加属性。</li>\n<li>类扩展添加的方法是必须要实现的。</li>\n<li>类扩展可以认为是一个私有的匿名的类别，因为类扩展定义在.m文件头部</li>\n<li>添加的属性和方法都没有暴露在头文件，所以在不考虑运行时特性的前提下这些扩展属性和方法只能在类内部使用，一定程度上可以说是实现了<code>私有的机制</code>。</li>\n</ul>\n<h5 id=\"Objective-C中类别特性的作用及其局限性是什么\"><a href=\"#Objective-C中类别特性的作用及其局限性是什么\" class=\"headerlink\" title=\"Objective-C中类别特性的作用及其局限性是什么\"></a>Objective-C中类别特性的作用及其局限性是什么</h5><p><strong>Objective-C中类别特性的作用如下：</strong></p>\n<ol>\n<li>可以将类的实现分散到多个不同文件或多个不同框架中（扩充新的方法）。</li>\n<li>可以创建对私有方法的前向引用。</li>\n<li>可以向对象添加非正式协议。</li>\n</ol>\n<p><strong>Objective-C中类别特性的局限性如下：</strong></p>\n<ol>\n<li>类别只能向原类中添加新的方法，且只能添加而不能删除或修改原方法，不能向原类中添加新的属性。</li>\n<li>类别向原类中添加的方法是全局有效的而且优先级最高，如果和原类的方法重名，那么会无条件覆盖掉原来的方法，造成难以发现的潜在危险。因此，使用类别添加方法一定注意保证是单纯的添加新方法，避免覆盖原来的方法（可以通过添加该类别的方法前缀来防止冲突）。例如，在多人协作开发的过程中，如果团队中有人在其他成员不知情的情况下使用类别将类中的方法覆盖了，那么这会使得项目在运行时出现意想不到的问题，并且难以发现和纠正问题。</li>\n</ol>\n","feature":null,"text":" 类别（新） 类别的设计体现了面向对象的核心原则，即开放封闭原则（Open Closed Principle，OCP）。对扩展开放，对修改封闭，从而降低代码的耦合度。 类别（Category）与继承（Inheritance）的区别如下： 子类继承是进行类扩展的另一种常用方法，当然...","link":"","photos":[],"count_time":{"symbolsCount":837,"symbolsTime":"1 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%88%AB%EF%BC%88%E6%96%B0%EF%BC%89\"><span class=\"toc-text\">类别（新）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Objective-C%E4%B8%AD%E7%B1%BB%E5%88%AB%E7%89%B9%E6%80%A7%E7%9A%84%E4%BD%9C%E7%94%A8%E5%8F%8A%E5%85%B6%E5%B1%80%E9%99%90%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">Objective-C中类别特性的作用及其局限性是什么</span></a></li></ol></li></ol>","author":{"name":"LittleLight","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"iOS开发者","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"categoryClass","uid":"89c4a16720cd53613e2e3d79607ee50f","slug":"categoryClass","date":"2021-04-25T12:01:33.000Z","updated":"2021-04-25T12:20:42.223Z","comments":true,"path":"api/articles/categoryClass.json","keywords":null,"cover":[],"text":" 类别（新） 类别的设计体现了面向对象的核心原则，即开放封闭原则（Open Closed Principle，OCP）。对扩展开放，对修改封闭，从而降低代码的耦合度。 类别（Category）与继承（Inheritance）的区别如下： 子类继承是进行类扩展的另一种常用方法，当然...","link":"","photos":[],"count_time":{"symbolsCount":837,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"LittleLight","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"iOS开发者","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}