{"title":"Dart基础语法总结","uid":"b31cd86eb2d45436159ffec7e16dc297","slug":"Dart基础语法总结","date":"2021-12-08T05:36:37.000Z","updated":"2021-12-08T07:43:02.842Z","comments":true,"path":"api/articles/Dart基础语法总结.json","keywords":null,"cover":null,"content":"<h4 id=\"Dart-基本输出操作\"><a href=\"#Dart-基本输出操作\" class=\"headerlink\" title=\"Dart 基本输出操作\"></a>Dart 基本输出操作</h4><pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\"><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//注意：Dart 和 Java 一样表达式以分号结尾，写习惯 Kotlin 的小伙伴需要注意了，这可能是你从 Kotlin 转 Dart 最大不适之一。</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//Dart 中所有函数的类型都是可以省略的，省略的时候返回值类型为 dynamic</span>\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//如果函数内部只有一个表达式，可以省略大括号，使用\"=>\"箭头函数；</span>\n<span class=\"token comment\">//而对于 Kotlin 则是如果只有一个表达式，可以省略大括号，使用\"=\"连接，类似 fun main(args: Array&lt;String>) = println('Hello World!')</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//最简写形式</span>\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n复制<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-数据类型\"><a href=\"#2-数据类型\" class=\"headerlink\" title=\"2. 数据类型\"></a>2. 数据类型</h3><p>在 Dart 中的一切皆是对象，包括数字、布尔值、函数等，它们和 Java 一样都继承于 Object，所以它们的默认值也就是 null。在 Dart 主要有：布尔类型 bool、数字类型 num（数字类型又分为 int、double，并且两者父类都是 num）、字符串类型 String、集合类型（List、Set、Map）、Runes 类和 Symbols 类型（后两个用的并不太多）。</p>\n<pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\"><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"2-1-布尔类型（bool）\"><a href=\"#2-1-布尔类型（bool）\" class=\"headerlink\" title=\"2.1 布尔类型（bool）\"></a><strong>2.1 布尔类型（bool）</strong></h4><p>在 Dart 中和 C 语言一样，都是使用 bool 来声明一个布尔类型变量或常量，而在 Kotlin 则是使用 Boolean 来声明，但是一致的是，它对应的值只有两个 true 和 false。</p>\n<pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\"><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    bool islose <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    bool isOpen <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-2-数字类型（num、int、double）\"><a href=\"#2-2-数字类型（num、int、double）\" class=\"headerlink\" title=\"2.2 数字类型（num、int、double）\"></a><strong>2.2 数字类型（num、int、double）</strong></h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在 Dart 中 int、double 都是类，然后 int、double 都继承** num 抽象类<strong>，这点和 Kotlin 很类似</strong>但是在 Dart 中没有 float、short、long 类型</p></blockquote>\n<pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\"><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  int width <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n  int height <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  double result <span class=\"token operator\">=</span> width <span class=\"token operator\">/</span> height<span class=\"token punctuation\">;</span>\n  int resultTwo <span class=\"token operator\">=</span> width <span class=\"token operator\">~/</span> height<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 整除操作</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>resultTwo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"数字常用的函数\"><a href=\"#数字常用的函数\" class=\"headerlink\" title=\"数字常用的函数\"></a>数字常用的函数</h5><pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\"><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.141592653</span><span class=\"token punctuation\">.</span><span class=\"token function\">toStringAsFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//3.142 保留有效数字</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">6.6</span><span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//6 向下取整</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">6.6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//-6 向上取整</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">9.9</span><span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//10 向上取整</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">666.6</span><span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//667 四舍五入</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">666.6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 666.6 取绝对值</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">666.6</span><span class=\"token punctuation\">.</span><span class=\"token function\">toInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//666 转化成 int,这中 toInt、toDouble 和 Kotlin 类似</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">999.</span>isEven<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false 是否是偶数</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">999.</span>isOdd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true 是否是奇数</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">666.6</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//666.6 转化成字符串</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"Dart-中字符串操作\"><a href=\"#Dart-中字符串操作\" class=\"headerlink\" title=\"Dart 中字符串操作\"></a>Dart 中字符串操作</h4><pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\"><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    String name <span class=\"token operator\">=</span> <span class=\"token string\">'Hello Dart!'</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//单引号</span>\n    String title <span class=\"token operator\">=</span> <span class=\"token string\">\"'Hello Dart!'\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//双引号</span>\n    String description <span class=\"token operator\">=</span> <span class=\"token string\">\"\"\"\n          Hello Dart! Hello Dart!\n          Hello Dart!\n          Hello Dart! Hello Dart!\n    \"\"\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//三引号</span>\n    num value <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    String result <span class=\"token operator\">=</span> <span class=\"token string\">\"The result is $value\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//单值引用</span>\n    num width <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n    num height <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span>\n    String square <span class=\"token operator\">=</span> <span class=\"token string\">\"The square is $&#123;width * height&#125;\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//表达式的值引用</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h6 id=\"字符串拆分相关操作\"><a href=\"#字符串拆分相关操作\" class=\"headerlink\" title=\"字符串拆分相关操作\"></a>字符串拆分相关操作</h6><pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\"><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  String url <span class=\"token operator\">=</span> <span class=\"token string\">\"https://mrale.ph/dartvm/\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"://\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//字符串分割 split 方法，类似 Java 和 Kotlin</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//字符串截取 substring 方法，类似 Java 和 Kotlin</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">codeUnitAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//取当前索引位置字符的 UTF-16 码</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//当前字符串是否以指定字符开头，类似 Java 和 Kotlin</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//当前字符串是否以指定字符结尾，类似 Java 和 Kotlin</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//大写，类似 Java 和 Kotlin</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//小写，类似 Java 和 Kotlin</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ph\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//获取指定字符的索引位置，类似 Java 和 Kotlin</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//字符串是否包含指定字符，类似 Java 和 Kotlin</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//去除字符串的首尾空格，类似 Java 和 Kotlin</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//获取字符串长度</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">replaceFirst</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//替换第一次出现 t 字符位置的字符</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"m\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"M\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//全部替换，类似 Java 和 Kotlin</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-4-类型检查（is-和-is-）和强制类型转换（as）\"><a href=\"#2-4-类型检查（is-和-is-）和强制类型转换（as）\" class=\"headerlink\" title=\"2.4 类型检查（is 和 is!）和强制类型转换（as）\"></a><strong>2.4 类型检查（is 和 is!）和强制类型转换（as）</strong></h4><p>和 Kotlin 一样，Dart 也是通过  <code>is</code>  关键字来对类型进行检查以及使用  <code>as</code>  关键字对类型进行强制转换，如果判断不是某个类型 Dart 中使用  <code>is!</code>，而在 Kotlin 中正好相反则用  <code>!is</code>  表示。</p>\n<pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\"><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    int number <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    double distance <span class=\"token operator\">=</span> <span class=\"token number\">200.5</span><span class=\"token punctuation\">;</span>\n    num age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">is</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>distance <span class=\"token operator\">is!</span> int<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>age <span class=\"token operator\">as</span> int<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//18</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-6-Object-类型\"><a href=\"#2-6-Object-类型\" class=\"headerlink\" title=\"2.6 Object 类型\"></a><strong>2.6 Object 类型</strong></h4><p>在 Dart 中所有东西都是对象，都继承于 Object，所以可以使用 Object 可以定义任何的变量，而且赋值后，类型也可以更改。</p>\n<pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\"><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    Object color <span class=\"token operator\">=</span> <span class=\"token string\">'black'</span><span class=\"token punctuation\">;</span>\n    color <span class=\"token operator\">=</span> <span class=\"token number\">0xff000000</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//运行正常，0xff000000 类型是 int, int 也继承于 Object   </span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-7-dynamic-类型\"><a href=\"#2-7-dynamic-类型\" class=\"headerlink\" title=\"2.7 dynamic 类型\"></a><strong>2.7 dynamic 类型</strong></h4><p>在 Dart 中还有一个和 Object 类型非常类似的类型那就是 dynamic 类型，下面讲到的 var 声明的变量未赋值的时候就是 dynamic 类型，它可以像 Object 一样可以改变类型。dynamic 类型一般用于无法确定具体类型，注意：<strong>建议不要滥用 dynamic，一般尽量使用 Object</strong>，如果你对 Flutter 和 Native 原生通信 PlatformChannel 代码熟悉的话，你会发现里面大量使用了 dynamic，因为可能 native 数据类型无法对应 Dart 中的数据类型，此时 Dart 接收一般就会使用 dynamic。</p>\n<p>Object 和 dynamic 区别在于：Object 会在<strong>编译阶段</strong>检查类型，而 dynamic 不会在<strong>编译阶段</strong>检查类型。</p>\n<pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\"><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">dynamic</span> color <span class=\"token operator\">=</span> <span class=\"token string\">'black'</span><span class=\"token punctuation\">;</span>\n    color <span class=\"token operator\">=</span> <span class=\"token number\">0xff000000</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//运行正常，0xff000000 类型是 int，int 也继承于 Object</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-1-var-关键字\"><a href=\"#3-1-var-关键字\" class=\"headerlink\" title=\"3.1 var 关键字\"></a><strong>3.1 var 关键字</strong></h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>var 并不是直接存储值，而是存储值的对象引用</p></blockquote>\n<p>在 Dart 中可以使用 var 来替代具体类型的声明，会<strong>自动推导变量的类型</strong>，这是因为 var 并不是直接存储值，而是存储值的对象引用，所以 var 可以声明任何变量。</p>\n<p>注意：在 Flutter 开发一般会经常使用 var 声明变量，以便于可以自动推导变量的类型。</p>\n<pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\"><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  int colorValue <span class=\"token operator\">=</span> <span class=\"token number\">0xff000000</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> colorKey <span class=\"token operator\">=</span> <span class=\"token string\">'black'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//var 声明变量自动根据赋值的类型，推导为 String 类型 </span>\n  <span class=\"token comment\">// 使用 var 声明集合变量 </span>\n  <span class=\"token keyword\">var</span> colorList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'yellow'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> colorSet <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'yellow'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> colorMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'white'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0xffffffff</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'black'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0xff000000</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>如果 var 声明的变量开始不初始化，不仅值可以改变，它的类型也是可以被修改的，但是一旦开始初始化赋值后，它的类型就确定了，后续不能被改变。</strong></p>\n<h4 id=\"3-2-常量（final-和-const）\"><a href=\"#3-2-常量（final-和-const）\" class=\"headerlink\" title=\"3.2 常量（final 和 const）\"></a><strong>3.2 常量（final 和 const）</strong></h4><ol>\n<li><p>如果常量是<strong>编译期</strong>就能初始化的就用 const</p>\n</li>\n<li><p>如果常量是<strong>运行时期</strong>初始化的就用 final</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\"><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>    \n  <span class=\"token keyword\">const</span> PI <span class=\"token operator\">=</span> <span class=\"token number\">3.141592653</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//const 定义常量    </span>\n  <span class=\"token keyword\">final</span> nowTime <span class=\"token operator\">=</span> DateTime<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//final 定义常量</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-集合（List、Set、Map）\"><a href=\"#4-集合（List、Set、Map）\" class=\"headerlink\" title=\"4. 集合（List、Set、Map）\"></a>4. 集合（L<code>i</code>st、Set、Map）</h3><h4 id=\"4-1-集合-List\"><a href=\"#4-1-集合-List\" class=\"headerlink\" title=\"4.1 集合 List\"></a><strong>4.1 集合 List</strong></h4><p>在使用方式上你会感觉它更像数组，但是它是可以随意对元素增删改成的。</p>\n<p>List 初始化方式：</p>\n<pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\"><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      List<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> colorList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'yellow'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//直接使用 [] 形式初始化</span>\n      <span class=\"token keyword\">var</span> colorList <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'yellow'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h6 id=\"List-常用的函数：\"><a href=\"#List-常用的函数：\" class=\"headerlink\" title=\"List 常用的函数：\"></a>List 常用的函数：</h6><pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\"><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    List<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> colorList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'yellow'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    colorList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'white'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//和 Kotlin 类似通过 add 添加一个新的元素</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>colorList<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//可以类似 Kotlin 一样，直接使用数组下标形式访问元素</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>colorList<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//获取集合的长度，这个 Kotlin 不一样，Kotlin 中使用的是 size</span>\n    colorList<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'black'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//在集合指定 index 位置插入指定的元素</span>\n    colorList<span class=\"token punctuation\">.</span><span class=\"token function\">removeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//移除集合指定的 index=2 的元素，第 3 个元素</span>\n    colorList<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//清除所有元素</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>colorList<span class=\"token punctuation\">.</span><span class=\"token function\">sublist</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//截取子集合</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>colorList<span class=\"token punctuation\">.</span><span class=\"token function\">getRange</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//获取集合中某个范围元素</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>colorList<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;--->'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//类似 Kotlin 中的 joinToString 方法，输出：red&lt;--->yellow&lt;--->blue&lt;--->green</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>colorList<span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>colorList<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'green'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"List-的遍历方式：\"><a href=\"#List-的遍历方式：\" class=\"headerlink\" title=\"List 的遍历方式：\"></a>List 的遍历方式：</h4><pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\"><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    List<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> colorList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'yellow'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//for-i 遍历</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> colorList<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//可以使用 var 或 int</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>colorList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        \n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//forEach 遍历</span>\n    colorList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//forEach 的参数为 Function. =>使用了箭头函数</span>\n    <span class=\"token comment\">//for-in 遍历</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> color <span class=\"token keyword\">in</span> colorList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//while+iterator 迭代器遍历，类似 Java 中的 iteator</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>colorList<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">moveNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>colorList<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"4-2-集合-Set\"><a href=\"#4-2-集合-Set\" class=\"headerlink\" title=\"4.2 集合 Set\"></a><strong>4.2 集合 Set</strong></h4><p>集合 Set 和列表 List 的区别在于“集合中的元素是不能重复”的。所以添加重复的元素时会返回 false，表示添加不成功。</p>\n<p>Set 初始化方式：</p>\n<pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\"><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    Set<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> colorSet<span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'yellow'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//直接使用 &#123;&#125; 形式初始化</span>\n    <span class=\"token keyword\">var</span> colorList <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'yellow'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h6 id=\"集合中的交、并、补集，在-Kotlin-并没有直接给到计算集合交、并、补的-API：\"><a href=\"#集合中的交、并、补集，在-Kotlin-并没有直接给到计算集合交、并、补的-API：\" class=\"headerlink\" title=\"集合中的交、并、补集，在 Kotlin 并没有直接给到计算集合交、并、补的 API：\"></a>集合中的交、并、补集，在 Kotlin 并没有直接给到计算集合交、并、补的 API：</h6><pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\"><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> colorSet1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'yellow'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> colorSet2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'black'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'yellow'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'white'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>colorSet1<span class=\"token punctuation\">.</span><span class=\"token function\">intersection</span><span class=\"token punctuation\">(</span>colorSet2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//交集-->输出: &#123;'yellow', 'blue', 'green'&#125;</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>colorSet1<span class=\"token punctuation\">.</span><span class=\"token function\">union</span><span class=\"token punctuation\">(</span>colorSet2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//并集--->输出: &#123;'black', 'red', 'yellow', 'blue', 'green', 'white'&#125;</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>colorSet1<span class=\"token punctuation\">.</span><span class=\"token function\">difference</span><span class=\"token punctuation\">(</span>colorSet2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//补集--->输出: &#123;'red'&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h6 id=\"Set-的遍历方式（和-List-一样）：\"><a href=\"#Set-的遍历方式（和-List-一样）：\" class=\"headerlink\" title=\"Set 的遍历方式（和 List 一样）：\"></a>Set 的遍历方式（和 List 一样）：</h6><pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\"><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  Set<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> colorSet <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'yellow'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//for-i 遍历</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> colorSet<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//可以使用 var 或 int</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>colorSet<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">//forEach 遍历</span>\n  colorSet<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//forEach 的参数为 Function. =>使用了箭头函数</span>\n  <span class=\"token comment\">//for-in 遍历</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> color <span class=\"token keyword\">in</span> colorSet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">//while+iterator 迭代器遍历，类似 Java 中的 iteator</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>colorSet<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">moveNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>colorSet<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"4-3-集合-Map\"><a href=\"#4-3-集合-Map\" class=\"headerlink\" title=\"4.3 集合 Map\"></a><strong>4.3 集合 Map</strong></h4><p>集合 Map 和 Kotlin 类似，key-value 形式存储，并且  <strong>Map 对象的中 key 是不能重复的</strong>。</p>\n<p>Map 初始化方式：</p>\n<pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\"><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> int<span class=\"token operator\">></span> colorMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'white'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0xffffffff</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'black'</span><span class=\"token punctuation\">:</span><span class=\"token number\">0xff000000</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//使用 &#123;key:value&#125; 形式初始化</span>\n <span class=\"token keyword\">var</span> colorMap <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> int<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'white'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0xffffffff</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'black'</span><span class=\"token punctuation\">:</span><span class=\"token number\">0xff000000</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Map 中常用的函数：</p>\n<pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\"><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> int<span class=\"token operator\">></span> colorMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'white'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0xffffffff</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'black'</span><span class=\"token punctuation\">:</span><span class=\"token number\">0xff000000</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>colorMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">'green'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>colorMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xff000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>colorMap<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//['white','black']</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>colorMap<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[0xffffffff, 0xff000000]</span>\n    colorMap<span class=\"token punctuation\">[</span><span class=\"token string\">'white'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xfffff000</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//修改指定 key 的元素</span>\n    colorMap<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">'black'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//移除指定 key 的元素</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Map 的遍历方式：</p>\n<pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\"><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> int<span class=\"token operator\">></span> colorMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'white'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0xffffffff</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'black'</span><span class=\"token punctuation\">:</span><span class=\"token number\">0xff000000</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//for-each key-value</span>\n    colorMap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'color is $key, color value is $value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Map.fromIterables 将 List 集合转化成 Map：</p>\n<pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\"><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    List<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> colorKeys <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'white'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'black'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    List<span class=\"token operator\">&lt;</span>int<span class=\"token operator\">></span> colorValues <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0xffffffff</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xff000000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> int<span class=\"token operator\">></span> colorMap <span class=\"token operator\">=</span> Map<span class=\"token punctuation\">.</span><span class=\"token function\">fromIterables</span><span class=\"token punctuation\">(</span>colorKeys<span class=\"token punctuation\">,</span> colorValues<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"4-4-集合常用的操作符\"><a href=\"#4-4-集合常用的操作符\" class=\"headerlink\" title=\"4.4 集合常用的操作符\"></a><strong>4.4 集合常用的操作符</strong></h4><p>Dart 对于集合操作的也非常符合现代语言的特点，含有丰富的集合操作符 API，可以让你处理结构化的数据更加简单。</p>\n<pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\"><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  List<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> colorList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'yellow'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//forEach 箭头函数遍历</span>\n  colorList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  colorList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//箭头函数遍历，如果箭头函数内部只有一个表达式可以省略大括号</span>\n\n  <span class=\"token comment\">//map 函数的使用</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>colorList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'$color_font'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//every 函数的使用，判断里面的元素是否都满足条件，返回值为 true/false</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>colorList<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> color <span class=\"token operator\">==</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//sort 函数的使用</span>\n  List<span class=\"token operator\">&lt;</span>int<span class=\"token operator\">></span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  numbers<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> num1 <span class=\"token operator\">-</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//升序排序</span>\n  numbers<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> num2 <span class=\"token operator\">-</span> num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//降序排序</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//where 函数使用，相当于 Kotlin 中的 filter 操作符，返回符合条件元素的集合</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> num <span class=\"token operator\">></span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//firstWhere 函数的使用，相当于 Kotlin 中的 find 操作符，返回符合条件的第一个元素，如果没找到返回 null</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">.</span><span class=\"token function\">firstWhere</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> num <span class=\"token operator\">==</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> orElse<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//注意: 如果没有找到，执行 orElse 代码块，可返回一个指定的默认值</span>\n\n  <span class=\"token comment\">//singleWhere 函数的使用，返回符合条件的第一个元素，如果没找到返回 null，但是前提是集合中只有一个符合条件的元素，否则就会抛出异常</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">.</span><span class=\"token function\">singleWhere</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> num <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> orElse<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//注意：如果没有找到，执行 orElse 代码块，可返回一个指定的默认值</span>\n\n  <span class=\"token comment\">//take(n)、skip(n) 函数的使用，take(n) 表示取当前集合前 n 个元素，skip(n) 表示跳过前 n 个元素，然后取剩余所有的元素</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">.</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">skip</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//List.from 函数的使用，从给定集合中创建一个新的集合,相当于 clone 一个集合</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//expand 函数的使用，将集合一个元素扩展成多个元素或者将多个元素组成二维数组展开成平铺一个一位数组</span>\n  <span class=\"token keyword\">var</span> pair <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flatten list: $&#123;pair.expand((pair) => pair)&#125;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> inputs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>'duplicated list<span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">&#123;</span>inputs<span class=\"token punctuation\">.</span><span class=\"token function\">expand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span>\n    number<span class=\"token punctuation\">,</span>\n    number<span class=\"token punctuation\">,</span>\n    number\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>'<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5-流程控制\"><a href=\"#5-流程控制\" class=\"headerlink\" title=\"5. 流程控制\"></a>5. 流程控制</h3><h4 id=\"5-1-for-循环\"><a href=\"#5-1-for-循环\" class=\"headerlink\" title=\"5.1 for 循环\"></a><strong>5.1 for 循环</strong></h4><pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\"><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    List<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> colorList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'yellow'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> colorList<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//可以用 var 或 int</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>colorList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"5-2-while-循环\"><a href=\"#5-2-while-循环\" class=\"headerlink\" title=\"5.2 while 循环\"></a><strong>5.2 while 循环</strong></h4><pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\"><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    List<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> colorList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'yellow'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> colorList<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>colorList<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"5-3-do-while-循环\"><a href=\"#5-3-do-while-循环\" class=\"headerlink\" title=\"5.3 do-while 循环\"></a><strong>5.3 do-while 循环</strong></h4><pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\"><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    List<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> colorList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'yellow'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>colorList<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> colorList<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"5-4-break-和-continue\"><a href=\"#5-4-break-和-continue\" class=\"headerlink\" title=\"5.4 break 和 continue\"></a><strong>5.4 break 和 continue</strong></h4><pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\"><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    List<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> colorList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'yellow'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> colorList<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//可以用 var 或 int</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>colorList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'yellow'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>colorList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>colorList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"5-5-if-else\"><a href=\"#5-5-if-else\" class=\"headerlink\" title=\"5.5 if-else\"></a><strong>5.5 if-else</strong></h4><pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\"><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numbers<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>isEven<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'偶数: $&#123;numbers[i]&#125;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>isOdd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'奇数: $&#123;numbers[i]&#125;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'非法数字'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"5-6-三目运算符（-、-）\"><a href=\"#5-6-三目运算符（-、-）\" class=\"headerlink\" title=\"5.6 三目运算符（?、:）\"></a><strong>5.6 三目运算符（?、:）</strong></h4><pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\"><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numbers<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      num targetNumber <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>isEven <span class=\"token operator\">?</span> numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">:</span> numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>targetNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"5-7-switch-case-语句\"><a href=\"#5-7-switch-case-语句\" class=\"headerlink\" title=\"5.7 switch-case 语句\"></a><strong>5.7 switch-case 语句</strong></h4><pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\">Color <span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span>String colorName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  Color currentColor <span class=\"token operator\">=</span> Colors<span class=\"token punctuation\">.</span>blue<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>colorName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"read\"</span><span class=\"token punctuation\">:</span>\n      currentColor <span class=\"token operator\">=</span> Colors<span class=\"token punctuation\">.</span>red<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">:</span>\n      currentColor <span class=\"token operator\">=</span> Colors<span class=\"token punctuation\">.</span>blue<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"yellow\"</span><span class=\"token punctuation\">:</span>\n      currentColor <span class=\"token operator\">=</span> Colors<span class=\"token punctuation\">.</span>yellow<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> currentColor<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"5-8-Assert（断言）\"><a href=\"#5-8-Assert（断言）\" class=\"headerlink\" title=\"5.8 Assert（断言）\"></a><strong>5.8 Assert（断言）</strong></h4><p>在 Dart 中如果条件表达式结果不满足条件，则可以使用 assert 语句中断代码的执行。特别是在 Flutter 源码中随处可见都是 assert 断言的使用。</p>\n<p>注意：断言只在检查模式下运行有效，如果在生产模式运行，则断言不会执行。</p>\n<pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\"><span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>text <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//text 为 null，就会中断后续代码执行</span>\n<span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>urlString<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"6-总结\"><a href=\"#6-总结\" class=\"headerlink\" title=\"6. 总结\"></a>6. 总结</h3><p>到这里，关于初探 Dart 语法上篇就结束了，这篇主要讲述 Dart 中的基本语法、数据类型、常量和变量、集合以及流程控制。下一篇将接着初探 Dart 语法下篇进行分析。</p>\n","text":"Dart 基本输出操作void main() &#123; print('Hello World!');//注意：Dart 和 Java 一样表达式以分号结尾，写习惯 Kotlin 的小伙伴需要注意了，这可能是你从 Kotlin 转 Dart 最大不适之一。 &#125; //D...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"11 mins."},"categories":[],"tags":[{"name":"Flutter","slug":"Flutter","count":1,"path":"api/tags/Flutter.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Dart-%E5%9F%BA%E6%9C%AC%E8%BE%93%E5%87%BA%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">Dart 基本输出操作</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">2. 数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E5%B8%83%E5%B0%94%E7%B1%BB%E5%9E%8B%EF%BC%88bool%EF%BC%89\"><span class=\"toc-text\">2.1 布尔类型（bool）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B%EF%BC%88num%E3%80%81int%E3%80%81double%EF%BC%89\"><span class=\"toc-text\">2.2 数字类型（num、int、double）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%95%B0%E5%AD%97%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">数字常用的函数</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Dart-%E4%B8%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">Dart 中字符串操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%86%E5%88%86%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">字符串拆分相关操作</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-4-%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%9F%A5%EF%BC%88is-%E5%92%8C-is-%EF%BC%89%E5%92%8C%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%EF%BC%88as%EF%BC%89\"><span class=\"toc-text\">2.4 类型检查（is 和 is!）和强制类型转换（as）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-6-Object-%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">2.6 Object 类型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-7-dynamic-%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">2.7 dynamic 类型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-var-%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">3.1 var 关键字</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-%E5%B8%B8%E9%87%8F%EF%BC%88final-%E5%92%8C-const%EF%BC%89\"><span class=\"toc-text\">3.2 常量（final 和 const）</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E9%9B%86%E5%90%88%EF%BC%88List%E3%80%81Set%E3%80%81Map%EF%BC%89\"><span class=\"toc-text\">4. 集合（List、Set、Map）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-1-%E9%9B%86%E5%90%88-List\"><span class=\"toc-text\">4.1 集合 List</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#List-%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%BD%E6%95%B0%EF%BC%9A\"><span class=\"toc-text\">List 常用的函数：</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#List-%E7%9A%84%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F%EF%BC%9A\"><span class=\"toc-text\">List 的遍历方式：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-%E9%9B%86%E5%90%88-Set\"><span class=\"toc-text\">4.2 集合 Set</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E9%9B%86%E5%90%88%E4%B8%AD%E7%9A%84%E4%BA%A4%E3%80%81%E5%B9%B6%E3%80%81%E8%A1%A5%E9%9B%86%EF%BC%8C%E5%9C%A8-Kotlin-%E5%B9%B6%E6%B2%A1%E6%9C%89%E7%9B%B4%E6%8E%A5%E7%BB%99%E5%88%B0%E8%AE%A1%E7%AE%97%E9%9B%86%E5%90%88%E4%BA%A4%E3%80%81%E5%B9%B6%E3%80%81%E8%A1%A5%E7%9A%84-API%EF%BC%9A\"><span class=\"toc-text\">集合中的交、并、补集，在 Kotlin 并没有直接给到计算集合交、并、补的 API：</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#Set-%E7%9A%84%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F%EF%BC%88%E5%92%8C-List-%E4%B8%80%E6%A0%B7%EF%BC%89%EF%BC%9A\"><span class=\"toc-text\">Set 的遍历方式（和 List 一样）：</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-3-%E9%9B%86%E5%90%88-Map\"><span class=\"toc-text\">4.3 集合 Map</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-4-%E9%9B%86%E5%90%88%E5%B8%B8%E7%94%A8%E7%9A%84%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">4.4 集合常用的操作符</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">5. 流程控制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-1-for-%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">5.1 for 循环</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-2-while-%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">5.2 while 循环</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-3-do-while-%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">5.3 do-while 循环</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-4-break-%E5%92%8C-continue\"><span class=\"toc-text\">5.4 break 和 continue</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-5-if-else\"><span class=\"toc-text\">5.5 if-else</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-6-%E4%B8%89%E7%9B%AE%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%88-%E3%80%81-%EF%BC%89\"><span class=\"toc-text\">5.6 三目运算符（?、:）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-7-switch-case-%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">5.7 switch-case 语句</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-8-Assert%EF%BC%88%E6%96%AD%E8%A8%80%EF%BC%89\"><span class=\"toc-text\">5.8 Assert（断言）</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">6. 总结</span></a>","author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Dart运算符","uid":"a18a0021d0e3774e23afd0f4a2e611d8","slug":"Dart运算符","date":"2021-12-08T07:14:50.000Z","updated":"2021-12-08T07:43:09.854Z","comments":true,"path":"api/articles/Dart运算符.json","keywords":null,"cover":null,"text":"Dart 基础语法（运算符）本篇文章上接初探 Dart 语法上篇，主要涉及一些 Dart 中的运算符、异常、函数、面向对象等。 1. 运算符1.1 算术运算符 名称 运算符 例子 加 + var result = 1 + 1; 减 - var result = 5 - 1; 乘 ...","link":"","photos":[],"count_time":{"symbolsCount":"7.8k","symbolsTime":"7 mins."},"categories":[],"tags":[],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"NSDictionary实现原理","uid":"859f0b706fef61b48159b2531ea13be9","slug":"NSDictionary实现原理","date":"2021-12-08T05:04:53.000Z","updated":"2021-12-08T05:16:49.849Z","comments":true,"path":"api/articles/NSDictionary实现原理.json","keywords":null,"cover":null,"text":"/Users/jiajiagao/Desktop/截屏2021-11-26 下午2.39.43.png ","link":"","photos":[],"count_time":{"symbolsCount":52,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}