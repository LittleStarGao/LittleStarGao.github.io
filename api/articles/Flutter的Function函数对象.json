{"title":"Flutter的Function函数对象","uid":"39ade3484174d56b659a76daf70210b1","slug":"Flutter的Function函数对象","date":"2021-12-17T01:07:57.000Z","updated":"2021-12-17T02:22:18.371Z","comments":true,"path":"api/articles/Flutter的Function函数对象.json","keywords":null,"cover":null,"content":"<h4 id=\"Function-函数对象\"><a href=\"#Function-函数对象\" class=\"headerlink\" title=\"Function 函数对象\"></a>Function 函数对象</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在 Dart 中一切都是对象，函数也不例外，函数可以作为一个参数传递。其中 Function 类是代表所有函数的公共顶层接口抽象类。Function 类中并没有声明任何实例方法。但是它有一个非常重要的静态类函数 apply。</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>该函数接收一个 Function 对象 function，一个 List 的参数 positionalArguments，以及一个可选参数  <code>Map&lt;Symbol, dynamic&gt;</code>  类型的 namedArguments。</p></blockquote>\n<h5 id=\"为什么-Dart-中函数支持位置参数和命名参数吗？\"><a href=\"#为什么-Dart-中函数支持位置参数和命名参数吗？\" class=\"headerlink\" title=\"为什么 Dart 中函数支持位置参数和命名参数吗？\"></a>为什么 Dart 中函数支持位置参数和命名参数吗？</h5><p>没错就是它们两个参数功劳。实际上，<strong>apply() 函数提供一种使用动态确定的参数列表来调用函数的机制</strong>，通过它我们就能处理在编译时参数列表不确定的情况。</p>\n<pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Function</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">external</span> <span class=\"token keyword\">static</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">Function</span> function<span class=\"token punctuation\">,</span> List positionalArguments<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">[</span>Map<span class=\"token operator\">&lt;</span>Symbol<span class=\"token punctuation\">,</span> <span class=\"token keyword\">dynamic</span><span class=\"token operator\">></span> namedArguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//可以看到这是 external 声明，我们需要找到对应的 function_patch.dart 实现</span>\n  int <span class=\"token keyword\">get</span> hashCode<span class=\"token punctuation\">;</span>\n  bool <span class=\"token keyword\">operator</span> <span class=\"token operator\">==</span><span class=\"token punctuation\">(</span>Object other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"Function-中源码实现\"><a href=\"#Function-中源码实现\" class=\"headerlink\" title=\"Function 中源码实现\"></a>Function 中源码实现</h4><p><strong>实现基本原理</strong></p>\n<ol>\n<li><p>计算外部参数位置参数个数</p>\n</li>\n<li><p>计算外部参数命名参数的个数</p>\n</li>\n<li><p>计算所有外部参数个数 = 外部位置参数 + 外部命名参数</p>\n</li>\n<li><p>创建一个订场为所有参数个数的List 集合 arguments </p>\n</li>\n<li><p>集合第一个参数是传入的function 对象</p>\n</li>\n<li><p>然后从1 位置开始插入所有的位置参数到 arguments 参数列表中</p>\n</li>\n<li><p>然后再创建一个为定长的命名参数长度 List 集合</p>\n</li>\n<li><p>遍历命名参数Map列表</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Function</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// TODO(regis): Pass type arguments to generic functions. Wait for API spec.</span>\n  <span class=\"token comment\">//可以看到内部私有的 _apply 函数，最终接收两个 List 原生类型的参数 arguments、names 分别代表着我们使用函数时</span>\n  <span class=\"token comment\">//定义的所有参数 List 集合 arguments（包括位置参数和命名参数）以及命名参数名 List 集合 names，不过它是委托到 native 层的 Function_apply C++ 函数实现的。</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function\">_apply</span><span class=\"token punctuation\">(</span>List arguments<span class=\"token punctuation\">,</span> List names<span class=\"token punctuation\">)</span> native <span class=\"token string\">\"Function_apply\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token metadata symbol\">@patch</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">Function</span> function<span class=\"token punctuation\">,</span> List positionalArguments<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">[</span>Map<span class=\"token operator\">&lt;</span>Symbol<span class=\"token punctuation\">,</span> <span class=\"token keyword\">dynamic</span><span class=\"token operator\">></span> namedArguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//计算外部函数位置参数的个数  </span>\n    int numPositionalArguments <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token comment\">// 默认同时会传入 function 参数，所以默认 +1</span>\n        <span class=\"token punctuation\">(</span>positionalArguments <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> positionalArguments<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//位置参数的集合不为空就返回集合长度否则返回 0</span>\n    <span class=\"token comment\">//计算外部函数命名参数的个数    </span>\n    int numNamedArguments <span class=\"token operator\">=</span> namedArguments <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> namedArguments<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//命名参数的集合不为空就返回集合长度否则返回 0</span>\n    <span class=\"token comment\">//计算所有参数个数总和: 位置参数个数 + 命名参数个数</span>\n    int numArguments <span class=\"token operator\">=</span> numPositionalArguments <span class=\"token operator\">+</span> numNamedArguments<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//创建一个定长为所有参数个数大小的 List 集合 arguments</span>\n    List arguments <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">(</span>numArguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//集合第一个元素默认是传入的 function 对象</span>\n    arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> function<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//然后从 1 的位置开始插入所有的位置参数到 arguments 参数列表中</span>\n    arguments<span class=\"token punctuation\">.</span><span class=\"token function\">setRange</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> numPositionalArguments<span class=\"token punctuation\">,</span> positionalArguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//然后再创建一个定长为命名参数长度的 List 集合</span>\n    List names <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">(</span>numNamedArguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    int argumentIndex <span class=\"token operator\">=</span> numPositionalArguments<span class=\"token punctuation\">;</span>\n    int nameIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//遍历命名参数 Map 集合</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numNamedArguments <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      namedArguments<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        arguments<span class=\"token punctuation\">[</span>argumentIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span><span class=\"token comment\">//把命名参数对象继续插入到 arguments 集合中</span>\n        names<span class=\"token punctuation\">[</span>nameIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> internal<span class=\"token punctuation\">.</span>Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//并把对应的参数名标识存入 names 集合中</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">_apply</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">,</span> names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//最后调用_apply 函数传入所有参数对象集合以及命名参数名称集合</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","feature":true,"text":"Function 函数对象 在 Dart 中一切都是对象，函数也不例外，函数可以作为一个参数传递。其中 Function 类是代表所有函数的公共顶层接口抽象类。Function 类中并没有声明任何实例方法。但是它有一个非常重要的静态类函数 apply。 该函数接收一个 Funct...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"Dart","slug":"Dart","count":5,"path":"api/tags/Dart.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Function-%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">Function 函数对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88-Dart-%E4%B8%AD%E5%87%BD%E6%95%B0%E6%94%AF%E6%8C%81%E4%BD%8D%E7%BD%AE%E5%8F%82%E6%95%B0%E5%92%8C%E5%91%BD%E5%90%8D%E5%8F%82%E6%95%B0%E5%90%97%EF%BC%9F\"><span class=\"toc-text\">为什么 Dart 中函数支持位置参数和命名参数吗？</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Function-%E4%B8%AD%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">Function 中源码实现</span></a></li></ol>","author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"Flutter参数","uid":"ef5aa7e92bb61e597e24d0ade2427469","slug":"Flutter参数","date":"2021-12-17T01:01:05.000Z","updated":"2021-12-17T01:01:05.181Z","comments":true,"path":"api/articles/Flutter参数.json","keywords":null,"cover":null,"text":"","link":"","photos":[],"count_time":{"symbolsCount":0,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}