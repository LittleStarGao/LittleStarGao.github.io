{"title":"alloc&init探究","uid":"20c5d0afd79142c4ce377e5e3d6eadea","slug":"alloc","date":"2021-05-01T09:45:39.000Z","updated":"2021-10-02T01:13:17.929Z","comments":true,"path":"api/articles/alloc.json","keywords":null,"cover":"https://static01.imgkr.com/temp/05ea7cec66a3408a929eb7cfe95619cf.png","content":"<h4 id=\"alloc-和-init-基本原理\"><a href=\"#alloc-和-init-基本原理\" class=\"headerlink\" title=\"alloc 和 init 基本原理\"></a>alloc 和 init 基本原理</h4><pre class=\"line-numbers language-objc\" data-language=\"objc\"><code class=\"language-objc\">LGPerson *p &#x3D; [[LGPerson alloc] init];\n LGPerson *p1 &#x3D; [p init];\n &#x2F;&#x2F; objc_msgSend （id 消息接收者，sel 发送消息）\n LGPerson *p2 &#x3D; [p init];\n NSLog(@&quot;输出将结果如下： %p-%p-%p&quot;, p, p1, p2);\n NSLog(@&quot;end&quot;); &#x2F;&#x2F;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"1-探究问题\"><a href=\"#1-探究问题\" class=\"headerlink\" title=\"1. 探究问题\"></a>1. 探究问题</h5><ul>\n<li>alloc 探究</li>\n<li>alloc 已经创建了对象init</li>\n<li>alloc 怎么实现创建</li>\n<li>alloc 实现- 原理-源码实现</li>\n</ul>\n<h5 id=\"2-探究方式\"><a href=\"#2-探究方式\" class=\"headerlink\" title=\"2. 探究方式\"></a>2. 探究方式</h5><ul>\n<li><p>libobjc.A.dylib</p>\n<ol>\n<li><p>下断点： control + in - objc_alloc</p>\n</li>\n<li><p>下符号断点：libobjc.A.dylib`+[NSObjject alloc]</p>\n</li>\n<li><p>通过汇编方式libobjc.A.dylib</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Debug -&gt; Debug workflow -&gt; Always Show Disassembly<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n</li>\n<li><p>![](截屏2021-05-01 下午6.01.02.png)</p>\n</li>\n</ul>\n<h3 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>使用真机调试</p></blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">libobjc.A.dylib 库关于 objc_alloc: <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"alloc-方法实现\"><a href=\"#alloc-方法实现\" class=\"headerlink\" title=\"alloc 方法实现\"></a>alloc 方法实现</h4><ul>\n<li>首先申请内存空间，给<strong>指针地址</strong></li>\n<li><code>register read x0</code> 方法读取寄存器的值</li>\n<li><strong>x0</strong> 即是返回对象的地址，以及存储数据的地方</li>\n</ul>\n<h5 id=\"alloc-实现源码执行的过程\"><a href=\"#alloc-实现源码执行的过程\" class=\"headerlink\" title=\"alloc 实现源码执行的过程\"></a>alloc 实现源码执行的过程</h5><ol>\n<li>调用alloc方法</li>\n</ol>\n<pre class=\"line-numbers language-objc\" data-language=\"objc\"><code class=\"language-objc\">+ (id)alloc &#123;\n  return _objc_rootAlloc(self);\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"2\">\n<li>调用_objc_rootAlloc(Class cls) 方法</li>\n</ol>\n<pre class=\"line-numbers language-objc\" data-language=\"objc\"><code class=\"language-objc\">_objc_rootAlloc(Class cls)\n&#123;\n    return callAlloc(cls, false&#x2F;*checkNil*&#x2F;, true&#x2F;*allocWithZone*&#x2F;);\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"3\">\n<li><code>static ALWAYS_INLINE id callAlloc(Class cls, bool checkNil, bool allocWithZone=false)</code> </li>\n</ol>\n<pre class=\"line-numbers language-objc\" data-language=\"objc\"><code class=\"language-objc\">static ALWAYS_INLINE id\ncallAlloc(Class cls, bool checkNil, bool allocWithZone&#x3D;false)\n&#123;\n    if (slowpath(checkNil &amp;&amp; !cls)) return nil;\n\n#if __OBJC2__\n    if (fastpath(!cls-&gt;ISA()-&gt;hasCustomAWZ())) &#123;\n        &#x2F;&#x2F; No alloc&#x2F;allocWithZone implementation. Go straight to the allocator.\n        &#x2F;&#x2F; fixme store hasCustomAWZ in the non-meta class and \n        &#x2F;&#x2F; add it to canAllocFast&#39;s summary\n        if (fastpath(cls-&gt;canAllocFast())) &#123;\n            &#x2F;&#x2F; No ctors, raw isa, etc. Go straight to the metal.\n            bool dtor &#x3D; cls-&gt;hasCxxDtor();\n            id obj &#x3D; (id)calloc(1, cls-&gt;bits.fastInstanceSize());\n            if (slowpath(!obj)) return callBadAllocHandler(cls);\n            obj-&gt;initInstanceIsa(cls, dtor);\n            return obj;\n        &#125;\n        else &#123;\n            &#x2F;&#x2F; Has ctor or raw isa or something. Use the slower path.\n            id obj &#x3D; class_createInstance(cls, 0);\n            if (slowpath(!obj)) return callBadAllocHandler(cls);\n            return obj;\n        &#125;\n    &#125;\n#endif\n\n    &#x2F;&#x2F; No shortcuts available.\n    if (allocWithZone) return [cls allocWithZone:nil];\n    return [cls alloc];\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"4\">\n<li>通过<code>class_createInstance</code>创建类的实例</li>\n</ol>\n<pre class=\"line-numbers language-objc\" data-language=\"objc\"><code class=\"language-objc\">id \nclass_createInstance(Class cls, size_t extraBytes)\n&#123;\n    return _class_createInstanceFromZone(cls, extraBytes, nil);\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"5\">\n<li><code>static __attribute__((always_inline))  id _class_createInstanceFromZone(Class cls, size_t extraBytes, void *zone, bool cxxConstruct = true, size_t *outAllocatedSize = nil)</code> 方法</li>\n</ol>\n<pre class=\"line-numbers language-objc\" data-language=\"objc\"><code class=\"language-objc\">static __attribute__((always_inline)) \nid\n_class_createInstanceFromZone(Class cls, size_t extraBytes, void *zone, \n                              bool cxxConstruct &#x3D; true, \n                              size_t *outAllocatedSize &#x3D; nil)\n&#123;\n    if (!cls) return nil;\n\n    assert(cls-&gt;isRealized());\n\n    &#x2F;&#x2F; Read class&#39;s info bits all at once for performance\n    bool hasCxxCtor &#x3D; cls-&gt;hasCxxCtor();\n    bool hasCxxDtor &#x3D; cls-&gt;hasCxxDtor();\n    bool fast &#x3D; cls-&gt;canAllocNonpointer();\n\n    size_t size &#x3D; cls-&gt;instanceSize(extraBytes);\n    if (outAllocatedSize) *outAllocatedSize &#x3D; size;\n\n    id obj;\n    if (!zone  &amp;&amp;  fast) &#123;\n      \t&#x2F;&#x2F; 分配内存空间的方法\n        obj &#x3D; (id)calloc(1, size);\n        if (!obj) return nil;\n        &#x2F;&#x2F; 关联内存空间\n        &#x2F;&#x2F; obj 指向实例对象\n        obj-&gt;initInstanceIsa(cls, hasCxxDtor);\n    &#125; \n    else &#123;\n        if (zone) &#123;\n          &#x2F;&#x2F;  分配内存空间\n            obj &#x3D; (id)malloc_zone_calloc ((malloc_zone_t *)zone, 1, size);\n        &#125; else &#123;\n          &#x2F;&#x2F; 分配内存空间\n            obj &#x3D; (id)calloc(1, size);\n        &#125;\n        if (!obj) return nil;\n\n        &#x2F;&#x2F; Use raw pointer isa on the assumption that they might be \n        &#x2F;&#x2F; doing something weird with the zone or RR.\n        obj-&gt;initIsa(cls);\n    &#125;\n\n    if (cxxConstruct &amp;&amp; hasCxxCtor) &#123;\n        obj &#x3D; _objc_constructOrFree(obj, cls);\n    &#125;\n\n    return obj;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h5 id=\"读取寄存器方法\"><a href=\"#读取寄存器方法\" class=\"headerlink\" title=\"读取寄存器方法\"></a>读取寄存器方法</h5><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">register read<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<img src=\"/post/alloc/debug.png\" class>\n\n\n\n<h4 id=\"内存对齐\"><a href=\"#内存对齐\" class=\"headerlink\" title=\"内存对齐\"></a>内存对齐</h4><pre class=\"line-numbers language-objc\" data-language=\"objc\"><code class=\"language-objc\">size_t instanceSize(size_t extraBytes) &#123;\n        size_t size &#x3D; alignedInstanceSize() + extraBytes;\n        &#x2F;&#x2F; CF requires all objects be at least 16 bytes.\n        if (size &lt; 16) size &#x3D; 16;\n        return size;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>内存对齐</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">uint32_t alignedInstanceSize() &#123;\n        return word_align(unalignedInstanceSize());\n    &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"内存查看地址\"><a href=\"#内存查看地址\" class=\"headerlink\" title=\"内存查看地址\"></a>内存查看地址</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>通过下面LLDB命令读取内从地址</p></blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">x p (倒着读取相应的数据)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<img src=\"/post/alloc/7.32.11.png\" class>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">x&#x2F;4xg p （4xg 可以 5xg 6xg）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<img src=\"/post/alloc/7.34.28.png\" class>","text":"alloc 和 init 基本原理LGPerson *p &#x3D; [[LGPerson alloc] init]; LGPerson *p1 &#x3D; [p init]; &#x2F;&#x2F; objc_msgSend （id 消息接收者，sel 发送消息） LGP...","link":"","photos":[],"count_time":{"symbolsCount":"4.6k","symbolsTime":"4 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#alloc-%E5%92%8C-init-%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">alloc 和 init 基本原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E6%8E%A2%E7%A9%B6%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">1. 探究问题</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E6%8E%A2%E7%A9%B6%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">2. 探究方式</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F%EF%BC%9A\"><span class=\"toc-text\">注意：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#alloc-%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">alloc 方法实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#alloc-%E5%AE%9E%E7%8E%B0%E6%BA%90%E7%A0%81%E6%89%A7%E8%A1%8C%E7%9A%84%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">alloc 实现源码执行的过程</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%AF%BB%E5%8F%96%E5%AF%84%E5%AD%98%E5%99%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">读取寄存器方法</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90\"><span class=\"toc-text\">内存对齐</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%86%85%E5%AD%98%E6%9F%A5%E7%9C%8B%E5%9C%B0%E5%9D%80\"><span class=\"toc-text\">内存查看地址</span></a></li></ol></li></ol>","author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"动态SQL","uid":"83f1863d7d241c1d5ddb943bddf231fd","slug":"dynamicSQL","date":"2021-05-01T23:43:13.000Z","updated":"2021-10-02T01:12:55.195Z","comments":true,"path":"api/articles/dynamicSQL.json","keywords":null,"cover":"https://static01.imgkr.com/temp/05ea7cec66a3408a929eb7cfe95619cf.png","text":"动态sql语句**动态sql语句概述 ** Mybatis 的映射文件中，前面我们的 SQL 都是比较简单的，有些时候业务逻辑复杂时，我们的 SQL是动 态变化的，此时在前面的学习中我们的 SQL 就不能满足要求了。 ","link":"","photos":[],"count_time":{"symbolsCount":119,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Mybatis对象关系映射","uid":"9d874e909a3a7a396d1451469b922294","slug":"Mybatis对象关系映射","date":"2021-04-29T12:12:40.000Z","updated":"2021-12-08T05:19:23.537Z","comments":true,"path":"api/articles/Mybatis对象关系映射.json","keywords":null,"cover":"https://static01.imgkr.com/temp/05ea7cec66a3408a929eb7cfe95619cf.png","text":"对象/关系数据库映射(ORM) ORM全称Object/Relation Mapping:表示对象-关系映射的缩写 ORM完成面向对象的编程语言到关系数据库的映射。当ORM框架完成映射后，程序员既可以利用面向 对象程序设计语言的简单易用性，又可以利用关系数据库的技术优势。ORM把...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"Mybatis","slug":"Mybatis","count":1,"path":"api/tags/Mybatis.json"}],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}