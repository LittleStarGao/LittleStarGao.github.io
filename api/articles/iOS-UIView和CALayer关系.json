{"title":"iOS UIView和CALayer关系","uid":"386fc4bc5a18ec12e9fe740e6fc9c9ef","slug":"iOS-UIView和CALayer关系","date":"2021-10-01T12:27:26.000Z","updated":"2021-10-03T09:56:06.433Z","comments":true,"path":"api/articles/iOS-UIView和CALayer关系.json","keywords":null,"cover":"https://static01.imgkr.com/temp/05ea7cec66a3408a929eb7cfe95619cf.png","content":"<h3 id=\"一、UIView-和-CALayer-探究\"><a href=\"#一、UIView-和-CALayer-探究\" class=\"headerlink\" title=\"一、UIView 和 CALayer 探究\"></a>一、UIView 和 CALayer 探究</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>所有的UIView都有CALayer 驱动、view 和 Layer 紧密关系，view从layer 中获取所需要所有数据、layer 侧重图形表示，view 相当于layer管理者</p></blockquote>\n<h5 id=\"UIView\"><a href=\"#UIView\" class=\"headerlink\" title=\"UIView\"></a>UIView</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>继承自 UIResponder</p></blockquote>\n<pre class=\"line-numbers language-objective-c\" data-language=\"objective-c\"><code class=\"language-objective-c\">NS_CLASS_AVAILABLE_IOS(2_0) @interface UIView : UIResponder &lt;NSCoding, UIAppearance, UIAppearanceContainer, UIDynamicItem, UITraitEnvironment, UICoordinateSpace, UIFocusItem, CALayerDelegate&gt;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h5 id=\"CALayer\"><a href=\"#CALayer\" class=\"headerlink\" title=\"CALayer\"></a>CALayer</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>继承NSObject</p></blockquote>\n<p><strong>CALayer是属于<code>QuartzCore</code>框架，而这个框架是一个跨平台的绘制框架。这里的跨平台指的是在<code>iOS</code>和<code>OS X</code>系统上均能使用，也就是说<code>CALayer</code>能在<code>iOS</code>和<code>OS X</code>上面绘制内容（这也说明了为什么CALayer的很多属性都不是UIKit框架下面的东西，比如它的backgroundColor是CGColorRef，因为OS X中没有UIKit）。但是这两个平台接收用户交互的方式完全不一样：<code>iOS是通过触摸事件</code>（touch event）而<code>OS X</code>则是<code>监听鼠标和键盘</code>事件。</strong></p>\n<pre class=\"line-numbers language-objective-c\" data-language=\"objective-c\"><code class=\"language-objective-c\">CA_CLASS_AVAILABLE (10.5, 2.0, 9.0, 2.0)\n@interface CALayer : NSObject &lt;NSCoding, CAMediaTiming&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"UILayer-和-UIView-的-Frame-关系\"><a href=\"#UILayer-和-UIView-的-Frame-关系\" class=\"headerlink\" title=\"UILayer 和 UIView 的 Frame 关系\"></a>UILayer 和 UIView 的 Frame 关系</h4><ul>\n<li>一个 Layer 的 <code>frame</code> 是由它的 <code>anchorPoint</code>,<code>position</code>,<code>bounds</code>,和 <code>transform</code> 共同决定</li>\n<li> <code>View</code> 的<code> frame</code> 只是简单的返回<code> Layer</code>的<code> frame</code></li>\n<li><code>View</code> 的 <code>center</code>和 <code>bounds</code> 也是返回 <code>Layer </code>的一些属性</li>\n</ul>\n<p><strong>自定义两个类TSView和TSLayer分别集成UIView和CALyer可以测试初始化过程</strong> </p>\n<pre class=\"line-numbers language-objective-c\" data-language=\"objective-c\"><code class=\"language-objective-c\">- (instancetype)init&#123;\n    self &#x3D; [super init];\n    if (self) &#123;\n        NSLog(@&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; TSView init&quot;);\n    &#125;\n    return self;\n&#125;\n\n+ (Class)layerClass&#123;\n    return [TSLayer class];\n&#125;\n\n- (void)setFrame:(CGRect)frame&#123;\n    [super setFrame:frame];\n&#125;\n\n- (void)setCenter:(CGPoint)center&#123;\n    [super setCenter:center];\n&#125;\n\n- (void)setBounds:(CGRect)bounds&#123;\n    [super setBounds:bounds];\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>TSLayer中重写以下方法</p>\n<pre class=\"line-numbers language-objective-c\" data-language=\"objective-c\"><code class=\"language-objective-c\">- (instancetype)init&#123;\n    self &#x3D; [super init];\n    if (self) &#123;\n        NSLog(@&quot;TSLayer init&quot;);\n    &#125;\n    return self;\n&#125;\n\n+ (Class)layerClass&#123;\n    return [TSLayer class];\n&#125;\n\n- (void)setFrame:(CGRect)frame&#123;\n    [super setFrame:frame];\n&#125;\n\n- (void)setPosition:(CGPoint)position&#123;\n    [super setPosition:position];\n&#125;\n\n- (void)setBounds:(CGRect)bounds&#123;\n    [super setBounds:bounds];\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>创建UIView 可以通过断点可以看到调用的过程</p>\n<pre class=\"line-numbers language-objective-c\" data-language=\"objective-c\"><code class=\"language-objective-c\">[TSLayer setBounds:];\n[TSView setFrame:];\n[TSLayer setFrame:];\n[TSLayer setPosetion:];\n[TSLayer setBounds:];<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"通过上面分析调用过程\"><a href=\"#通过上面分析调用过程\" class=\"headerlink\" title=\"通过上面分析调用过程\"></a>通过上面分析调用过程</h4><ul>\n<li>Layer 的设置尺寸和位置并没有调用View 的setCenter 和 setBounds 方法</li>\n<li>修改view的bound.size 或者 bounds.origin 时候调用的是Layer 的一些方法</li>\n</ul>\n<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>View 的 Center 和 Bounds 只是直接返回layer 对应的 Position 和 Bounds</p></blockquote>\n<p><strong>UIView主要是对显示内容的管理，而CALayer主要是对显示的绘制</strong></p>\n<ul>\n<li><p>分别重写UIView的drawRect和CALayer的display方法</p>\n<ul>\n<li>在TSView中重写drawRect：</li>\n</ul>\n</li>\n<li><p>可以看到 UIView 是 CALayer 的CALayerDelegate，由此可以猜测是在代理方法内部<code>[UIView(CALayerDelegate) drawLayer:inContext]</code>调用<code> UIView</code> 的`drawRect``方法，从而绘制出了 UIView 的内容。</p>\n</li>\n<li><p>每个<strong>View</strong>都有自己<strong>Layer</strong></p>\n</li>\n<li><p>也有独立的<strong>layer</strong> 例如<strong>CAShapelayer</strong> 他们不需要附加到view 上就可以在屏幕上显示内容</p>\n</li>\n<li><p>一个<strong>单独layer</strong> 改变<strong>任何属性</strong>，都会触发从一个从旧值到新值的过程<strong>（隐式动画）</strong></p>\n</li>\n<li><p>改变view 中的layer 属性，直接从当前帧跳到下一帧</p>\n</li>\n<li><p><code>UIView</code>默认<code>禁止layer </code>动画 </p>\n</li>\n<li><p>当<code>layer </code>在背后支持一个<code>view</code>时候，<code>view</code>就是它的代理</p>\n</li>\n<li><p>UIView的尺寸样式，都是有内部<code>Layer</code>提供<code>（CALayerDelegate）``View</code>显示内容取决于<code>CALayer </code>的<code>display</code></p>\n</li>\n<li><p>Layer 内部维护 Layer Tree</p>\n<ul>\n<li><code>presentLayer tree</code> （动画树）</li>\n<li><code>modelLayer tree</code> (模型树)</li>\n<li><code>Render Tree</code> （渲染树）</li>\n<li>iOS动画改变属性，是<code>layer</code> 的``presentLayer<code> 属性，最终渲染提供给</code>View<code> 显示是</code>modelLayer Tree`</li>\n<li>layer可以设置圆角显示（cornerRadius），也可以设置阴影 (shadowColor)。但是如果<code>layer</code>树中某个<code>layer</code>设置了<code>圆角</code>，树种所有<code>layer</code>的<code>阴影</code>效果都将不显示了。<code>因此若是要有圆角又要阴影，变通方法只能做两个重叠的UIView</code>，一个的layer显示圆角，<code>·一个layer显示阴影</code>……</li>\n<li>当更新层，改变不能立即显示在屏幕上。当所有的层都准备好时，可以调用setNeedsDisplay方法来重绘显示。</li>\n</ul>\n</li>\n</ul>\n<img src=\"/post/iOS-UIView%E5%92%8CCALayer%E5%85%B3%E7%B3%BB/webp-20211003175529142\" class title=\"img\">\n","text":"一、UIView 和 CALayer 探究 所有的UIView都有CALayer 驱动、view 和 Layer 紧密关系，view从layer 中获取所需要所有数据、layer 侧重图形表示，view 相当于layer管理者 UIView 继承自 UIResponder NS_...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"UIView","slug":"UIView","count":3,"path":"api/tags/UIView.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81UIView-%E5%92%8C-CALayer-%E6%8E%A2%E7%A9%B6\"><span class=\"toc-text\">一、UIView 和 CALayer 探究</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#UIView\"><span class=\"toc-text\">UIView</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#CALayer\"><span class=\"toc-text\">CALayer</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#UILayer-%E5%92%8C-UIView-%E7%9A%84-Frame-%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">UILayer 和 UIView 的 Frame 关系</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%80%9A%E8%BF%87%E4%B8%8A%E9%9D%A2%E5%88%86%E6%9E%90%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">通过上面分析调用过程</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93%EF%BC%9A\"><span class=\"toc-text\">总结：</span></a>","author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"iOS面试问题总结（架构设计模式）","uid":"14b08975a30eb8616d67d5a52db5f251","slug":"iOS面试问题总结（架构设计模式）","date":"2021-10-02T02:57:55.000Z","updated":"2021-10-02T09:58:48.627Z","comments":true,"path":"api/articles/iOS面试问题总结（架构设计模式）.json","keywords":null,"cover":"https://static01.imgkr.com/temp/05ea7cec66a3408a929eb7cfe95619cf.png","text":"设计模式 设计模式是一种编码经验，就是用比较成熟的逻辑去处理某一种类型的事情。 设计模式是什么？ 你知道哪些设计模式，并简要叙述？ 1). MVC模式：Model View Control，把模型 视图 控制器 层进行解耦合编写。 2). MVVM模式：Model View Vi...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"设计模式、架构、MVVM","slug":"设计模式、架构、MVVM","count":1,"path":"api/tags/设计模式、架构、MVVM.json"}],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"《腾讯iOS测试实践》学习（一）","uid":"72c9fa0d926f81572e4b5de9847c1152","slug":"《腾讯iOS测试实践》学习（一）","date":"2021-10-01T07:06:49.000Z","updated":"2021-10-02T01:13:36.513Z","comments":true,"path":"api/articles/《腾讯iOS测试实践》学习（一）.json","keywords":null,"cover":"https://static01.imgkr.com/temp/05ea7cec66a3408a929eb7cfe95619cf.png","text":" 工程效率 需求评审：需求评审机制以及更新通知，避免需求有改动而没有及时同步到相关角色。 代码质量：静态代码扫描，千行代码缺陷率等。 架构评审：代码架构的讨论以及评审。 Bug流程：Bug生命周期，避免随便修改Bug状态以及备注缺失。 Code Review：代码评审，如果有代码...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"测试","slug":"测试","count":1,"path":"api/tags/测试.json"}],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}