{"title":"RunTime中","uid":"762c36802ec13a21aa701b7f071811de","slug":"runtime数据结构","date":"2021-12-07T07:54:39.000Z","updated":"2021-12-17T02:23:42.497Z","comments":true,"path":"api/articles/runtime数据结构.json","keywords":null,"cover":null,"content":"<h4 id=\"Runtime-中关于对象\"><a href=\"#Runtime-中关于对象\" class=\"headerlink\" title=\"Runtime 中关于对象\"></a>Runtime 中关于对象</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>涉及到的数据结构</p></blockquote>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//对象</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">objc_object</span> <span class=\"token punctuation\">&#123;</span>\n    Class isa  OBJC_ISA_AVAILABILITY<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//类</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">objc_class</span> <span class=\"token punctuation\">&#123;</span>\n    Class isa  OBJC_ISA_AVAILABILITY<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token operator\">!</span>__OBJC2__</span></span>\n    Class super_class                                        OBJC2_UNAVAILABLE<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name                                         OBJC2_UNAVAILABLE<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> version                                             OBJC2_UNAVAILABLE<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> info                                                OBJC2_UNAVAILABLE<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> instance_size                                       OBJC2_UNAVAILABLE<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">objc_ivar_list</span> <span class=\"token operator\">*</span>ivars                             OBJC2_UNAVAILABLE<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">objc_method_list</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>methodLists                    OBJC2_UNAVAILABLE<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">objc_cache</span> <span class=\"token operator\">*</span>cache                                 OBJC2_UNAVAILABLE<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">objc_protocol_list</span> <span class=\"token operator\">*</span>protocols                     OBJC2_UNAVAILABLE<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n<span class=\"token punctuation\">&#125;</span> OBJC2_UNAVAILABLE<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//方法列表</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">objc_method_list</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">objc_method_list</span> <span class=\"token operator\">*</span>obsolete                        OBJC2_UNAVAILABLE<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> method_count                                         OBJC2_UNAVAILABLE<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__LP64__</span></span>\n    <span class=\"token keyword\">int</span> space                                                OBJC2_UNAVAILABLE<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n    <span class=\"token comment\">/* variable length structure */</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">objc_method</span> method_list<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>                        OBJC2_UNAVAILABLE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>                                                            OBJC2_UNAVAILABLE<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//方法</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">objc_method</span> <span class=\"token punctuation\">&#123;</span>\n    SEL method_name                                          OBJC2_UNAVAILABLE<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>method_types                                       OBJC2_UNAVAILABLE<span class=\"token punctuation\">;</span>\n    IMP method_imp                                           OBJC2_UNAVAILABLE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"系统查找方法的过程\"><a href=\"#系统查找方法的过程\" class=\"headerlink\" title=\"系统查找方法的过程\"></a>系统查找方法的过程</h4><ul>\n<li>系统首先找到消息的接收对象，然后通过对象的<code>isa</code>找到它的类。</li>\n<li>在它的类中查找<code>method_list</code>，是否有<code>selector</code>方法。</li>\n<li>没有则查找父类的<code>method_list</code>。</li>\n<li>找到对应的<code>method</code>，执行它的<code>IMP</code>。</li>\n<li>转发<code>IMP</code>的<code>return</code>值。</li>\n</ul>\n<h5 id=\"下面讲讲消息传递用到的一些概念：\"><a href=\"#下面讲讲消息传递用到的一些概念：\" class=\"headerlink\" title=\"下面讲讲消息传递用到的一些概念：\"></a>下面讲讲消息传递用到的一些概念：</h5><ul>\n<li>类对象(objc_class)</li>\n<li>实例(objc_object)</li>\n<li>元类(Meta Class)</li>\n<li>Method(objc_method)</li>\n<li>SEL(objc_selector)</li>\n<li>IMP</li>\n<li>类缓存(objc_cache)</li>\n<li>Category(objc_category)</li>\n</ul>\n<h5 id=\"RunTime-消息转发（动态方法解析）\"><a href=\"#RunTime-消息转发（动态方法解析）\" class=\"headerlink\" title=\"RunTime 消息转发（动态方法解析）\"></a>RunTime 消息转发（动态方法解析）</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Objective-C运行时会调用 让你有机会提供一个函数实现。如果你添加了函数并返回YES， 那运行时系统就会重新启动一次消息发送的过程。</p></blockquote>\n<pre class=\"line-numbers language-objectivec\" data-language=\"objectivec\"><code class=\"language-objectivec\">\n<span class=\"token operator\">+</span>resolveClassMethod<span class=\"token punctuation\">:</span>，<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-objectivec\" data-language=\"objectivec\"><code class=\"language-objectivec\"><span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>viewDidLoad <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">[</span><span class=\"token keyword\">super</span> viewDidLoad<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Do any additional setup after loading the view, typically from a nib.</span>\n    <span class=\"token comment\">//执行foo函数</span>\n    <span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> performSelector<span class=\"token punctuation\">:</span><span class=\"token keyword\">@selector</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">:</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>BOOL<span class=\"token punctuation\">)</span>resolveInstanceMethod<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>SEL<span class=\"token punctuation\">)</span>sel <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sel <span class=\"token operator\">==</span> <span class=\"token keyword\">@selector</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">:</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//如果是执行foo函数，就动态解析，指定新的IMP</span>\n        <span class=\"token function\">class_addMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> class<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> sel<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>IMP<span class=\"token punctuation\">)</span>fooMethod<span class=\"token punctuation\">,</span> <span class=\"token string\">\"v@:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> YES<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">super</span> resolveInstanceMethod<span class=\"token punctuation\">:</span>sel<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">fooMethod</span><span class=\"token punctuation\">(</span>id obj<span class=\"token punctuation\">,</span> SEL _cmd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"Doing foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//新的foo函数</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h6 id=\"第一步：消息转发\"><a href=\"#第一步：消息转发\" class=\"headerlink\" title=\"第一步：消息转发\"></a>第一步：消息转发</h6><pre class=\"line-numbers language-objectivec\" data-language=\"objectivec\"><code class=\"language-objectivec\"><span class=\"token operator\">+</span>resolveInstanceMethod<span class=\"token punctuation\">:</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h6 id=\"第二步：消息转发（备用接受者）\"><a href=\"#第二步：消息转发（备用接受者）\" class=\"headerlink\" title=\"第二步：消息转发（备用接受者）\"></a>第二步：消息转发（备用接受者）</h6><pre class=\"line-numbers language-objectivec\" data-language=\"objectivec\"><code class=\"language-objectivec\">forwardingTargetForSelector<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果目标对象实现了<code>-forwardingTargetForSelector:</code>，<code>Runtime</code> 这时就会调用这个方法，给你把这个消息转发给其他对象的机会。</p>\n<pre class=\"line-numbers language-objectivec\" data-language=\"objectivec\"><code class=\"language-objectivec\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">import</span> <span class=\"token string\">\"ViewController.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">import</span> <span class=\"token string\">\"objc/runtime.h\"</span></span>\n\n<span class=\"token keyword\">@interface</span> Person<span class=\"token punctuation\">:</span> NSObject\n\n<span class=\"token keyword\">@end</span>\n\n<span class=\"token keyword\">@implementation</span> Person\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>foo <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"Doing foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Person的foo函数</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">@end</span>\n\n<span class=\"token keyword\">@interface</span> <span class=\"token function\">ViewController</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">@end</span>\n\n<span class=\"token keyword\">@implementation</span> ViewController\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>viewDidLoad <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">[</span><span class=\"token keyword\">super</span> viewDidLoad<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Do any additional setup after loading the view, typically from a nib.</span>\n    <span class=\"token comment\">//执行foo函数</span>\n    <span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> performSelector<span class=\"token punctuation\">:</span><span class=\"token keyword\">@selector</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>BOOL<span class=\"token punctuation\">)</span>resolveInstanceMethod<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>SEL<span class=\"token punctuation\">)</span>sel <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> NO<span class=\"token punctuation\">;</span><span class=\"token comment\">//返回YES，进入下一步转发</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 消息转发</span>\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>forwardingTargetForSelector<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>SEL<span class=\"token punctuation\">)</span>aSelector <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>aSelector <span class=\"token operator\">==</span> <span class=\"token keyword\">@selector</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>Person new<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//返回Person对象，让Person对象接收这个消息</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">super</span> forwardingTargetForSelector<span class=\"token punctuation\">:</span>aSelector<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">@end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"完整消息转发\"><a href=\"#完整消息转发\" class=\"headerlink\" title=\"完整消息转发\"></a>完整消息转发</h4><p>如果在上一步还不能处理未知消息，则唯一能做的就是启用完整的消息转发机制了。<br>首先它会发送<code>-methodSignatureForSelector:</code>消息获得函数的参数和返回值类型。如果<code>-methodSignatureForSelector:</code>返回<code>nil</code> ，<code>Runtime</code>则会发出 <code>-doesNotRecognizeSelector:</code> 消息，程序这时也就挂掉了。如果返回了一个函数签名，<code>Runtime</code>就会创建一个<code>NSInvocation</code> 对象并发送 <code>-forwardInvocation:</code>消息给目标对象。</p>\n<p>实现一个完整转发的例子如下：</p>\n<pre class=\"line-numbers language-objectivec\" data-language=\"objectivec\"><code class=\"language-objectivec\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">import</span> <span class=\"token string\">\"ViewController.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">import</span> <span class=\"token string\">\"objc/runtime.h\"</span></span>\n\n<span class=\"token keyword\">@interface</span> Person<span class=\"token punctuation\">:</span> NSObject\n\n<span class=\"token keyword\">@end</span>\n\n<span class=\"token keyword\">@implementation</span> Person\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>foo <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"Doing foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Person的foo函数</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">@end</span>\n\n<span class=\"token keyword\">@interface</span> <span class=\"token function\">ViewController</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">@end</span>\n\n<span class=\"token keyword\">@implementation</span> ViewController\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>viewDidLoad <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">[</span><span class=\"token keyword\">super</span> viewDidLoad<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Do any additional setup after loading the view, typically from a nib.</span>\n    <span class=\"token comment\">//执行foo函数</span>\n    <span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> performSelector<span class=\"token punctuation\">:</span><span class=\"token keyword\">@selector</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>BOOL<span class=\"token punctuation\">)</span>resolveInstanceMethod<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>SEL<span class=\"token punctuation\">)</span>sel <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> YES<span class=\"token punctuation\">;</span><span class=\"token comment\">//返回YES，进入下一步转发</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>forwardingTargetForSelector<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>SEL<span class=\"token punctuation\">)</span>aSelector <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> nil<span class=\"token punctuation\">;</span><span class=\"token comment\">//返回nil，进入下一步转发</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>NSMethodSignature <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>methodSignatureForSelector<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>SEL<span class=\"token punctuation\">)</span>aSelector <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">NSStringFromSelector</span><span class=\"token punctuation\">(</span>aSelector<span class=\"token punctuation\">)</span> isEqualToString<span class=\"token punctuation\">:</span><span class=\"token string\">@\"foo\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>NSMethodSignature signatureWithObjCTypes<span class=\"token punctuation\">:</span><span class=\"token string\">\"v@:\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//签名，进入forwardInvocation</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">super</span> methodSignatureForSelector<span class=\"token punctuation\">:</span>aSelector<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>forwardInvocation<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSInvocation <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>anInvocation <span class=\"token punctuation\">&#123;</span>\n    SEL sel <span class=\"token operator\">=</span> anInvocation<span class=\"token punctuation\">.</span>selector<span class=\"token punctuation\">;</span>\n\n    Person <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>Person new<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>p respondsToSelector<span class=\"token punctuation\">:</span>sel<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">[</span>anInvocation invokeWithTarget<span class=\"token punctuation\">:</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> doesNotRecognizeSelector<span class=\"token punctuation\">:</span>sel<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">@end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h4><ul>\n<li>关联对象(Objective-C Associated Objects)给分类增加属性</li>\n<li>方法魔法(Method Swizzling)方法添加和替换和KVO实现</li>\n<li>消息转发(热更新)解决Bug(JSPatch)</li>\n<li>实现NSCoding的自动归档和自动解档</li>\n<li>实现字典和模型的自动转换(MJExtension)</li>\n</ul>\n<h4 id=\"方法替换\"><a href=\"#方法替换\" class=\"headerlink\" title=\"方法替换\"></a>方法替换</h4><pre class=\"line-numbers language-objectivec\" data-language=\"objectivec\"><code class=\"language-objectivec\"><span class=\"token keyword\">@implementation</span> ViewController\n\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>load <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">static</span> dispatch_once_t onceToken<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dispatch_once</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>onceToken<span class=\"token punctuation\">,</span> <span class=\"token operator\">^</span><span class=\"token punctuation\">&#123;</span>\n        Class class <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> class<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        SEL originalSelector <span class=\"token operator\">=</span> <span class=\"token keyword\">@selector</span><span class=\"token punctuation\">(</span>viewDidLoad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        SEL swizzledSelector <span class=\"token operator\">=</span> <span class=\"token keyword\">@selector</span><span class=\"token punctuation\">(</span>jkviewDidLoad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        Method originalMethod <span class=\"token operator\">=</span> <span class=\"token function\">class_getInstanceMethod</span><span class=\"token punctuation\">(</span>class<span class=\"token punctuation\">,</span>originalSelector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Method swizzledMethod <span class=\"token operator\">=</span> <span class=\"token function\">class_getInstanceMethod</span><span class=\"token punctuation\">(</span>class<span class=\"token punctuation\">,</span>swizzledSelector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//judge the method named  swizzledMethod is already existed.</span>\n        BOOL didAddMethod <span class=\"token operator\">=</span> <span class=\"token function\">class_addMethod</span><span class=\"token punctuation\">(</span>class<span class=\"token punctuation\">,</span> originalSelector<span class=\"token punctuation\">,</span> <span class=\"token function\">method_getImplementation</span><span class=\"token punctuation\">(</span>swizzledMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">method_getTypeEncoding</span><span class=\"token punctuation\">(</span>swizzledMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// if swizzledMethod is already existed.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>didAddMethod<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">class_replaceMethod</span><span class=\"token punctuation\">(</span>class<span class=\"token punctuation\">,</span> swizzledSelector<span class=\"token punctuation\">,</span> <span class=\"token function\">method_getImplementation</span><span class=\"token punctuation\">(</span>originalMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">method_getTypeEncoding</span><span class=\"token punctuation\">(</span>originalMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">method_exchangeImplementations</span><span class=\"token punctuation\">(</span>originalMethod<span class=\"token punctuation\">,</span> swizzledMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>jkviewDidLoad <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"替换的方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> jkviewDidLoad<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>viewDidLoad <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"自带的方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token keyword\">super</span> viewDidLoad<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">@end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>swizzling应该只在+load中完成。 在 Objective-C 的运行时中，每个类有两个方法都会自动调用。+load 是在一个类被初始装载时调用，+initialize 是在应用第一次调用该类的类方法或实例方法前调用的。两个方法都是可选的，并且只有在方法被实现的情况下才会被调用。</p></blockquote>\n<pre class=\"line-numbers language-objectivec\" data-language=\"objectivec\"><code class=\"language-objectivec\"><span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>initWithCoder<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSCoder <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>aDecoder <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">super</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> outCount<span class=\"token punctuation\">;</span>\n        Ivar <span class=\"token operator\">*</span> ivars <span class=\"token operator\">=</span> <span class=\"token function\">class_copyIvarList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> class<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>outCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> outCount<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            Ivar ivar <span class=\"token operator\">=</span> ivars<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            NSString <span class=\"token operator\">*</span> key <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSString stringWithUTF8String<span class=\"token punctuation\">:</span><span class=\"token function\">ivar_getName</span><span class=\"token punctuation\">(</span>ivar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> setValue<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>aDecoder decodeObjectForKey<span class=\"token punctuation\">:</span>key<span class=\"token punctuation\">]</span> forKey<span class=\"token punctuation\">:</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>encodeWithCoder<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>NSCoder <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>aCoder <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> outCount<span class=\"token punctuation\">;</span>\n    Ivar <span class=\"token operator\">*</span> ivars <span class=\"token operator\">=</span> <span class=\"token function\">class_copyIvarList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> class<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>outCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> outCount<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        Ivar ivar <span class=\"token operator\">=</span> ivars<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        NSString <span class=\"token operator\">*</span> key <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSString stringWithUTF8String<span class=\"token punctuation\">:</span><span class=\"token function\">ivar_getName</span><span class=\"token punctuation\">(</span>ivar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">[</span>aCoder encodeObject<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> valueForKey<span class=\"token punctuation\">:</span>key<span class=\"token punctuation\">]</span> forKey<span class=\"token punctuation\">:</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">message: &quot;nested exception is org.apache.ibatis.exceptions.PersistenceException: ↵### Error querying database.  Cause: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: Error: Method queryTotal execution error of sql : ↵ SELECT COUNT(1) FROM re_clues LEFT JOIN re_employee ON re_clues.employee_id &#x3D; re_employee.id WHERE (belong_company_id &#x3D; ? AND company_name LIKE ?) ↵↵### The error may exist in com&#x2F;inquiry&#x2F;mapper&#x2F;ReCluesMapper.xml↵### The error may involve defaultParameterMap↵### The error occurred while setting parameters↵### Cause: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: Error: Method queryTotal execution error of sql : ↵ SELECT COUNT(1) FROM re_clues LEFT JOIN re_employee ON re_clues.employee_id &#x3D; re_employee.id WHERE (belong_company_id &#x3D; ? AND company_name LIKE ?) ↵&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n","text":"Runtime 中关于对象 涉及到的数据结构 //对象 struct objc_object &#123; Class isa OBJC_ISA_AVAILABILITY; &#125;; //类 struct objc_class &#123; Class isa OBJC_I...","link":"","photos":[],"count_time":{"symbolsCount":"8.4k","symbolsTime":"8 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Runtime-%E4%B8%AD%E5%85%B3%E4%BA%8E%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">Runtime 中关于对象</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%B3%BB%E7%BB%9F%E6%9F%A5%E6%89%BE%E6%96%B9%E6%B3%95%E7%9A%84%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">系统查找方法的过程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%B8%8B%E9%9D%A2%E8%AE%B2%E8%AE%B2%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92%E7%94%A8%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5%EF%BC%9A\"><span class=\"toc-text\">下面讲讲消息传递用到的一些概念：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#RunTime-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%EF%BC%88%E5%8A%A8%E6%80%81%E6%96%B9%E6%B3%95%E8%A7%A3%E6%9E%90%EF%BC%89\"><span class=\"toc-text\">RunTime 消息转发（动态方法解析）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E6%AD%A5%EF%BC%9A%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91\"><span class=\"toc-text\">第一步：消息转发</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%9A%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%EF%BC%88%E5%A4%87%E7%94%A8%E6%8E%A5%E5%8F%97%E8%80%85%EF%BC%89\"><span class=\"toc-text\">第二步：消息转发（备用接受者）</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91\"><span class=\"toc-text\">完整消息转发</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">应用场景</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E6%9B%BF%E6%8D%A2\"><span class=\"toc-text\">方法替换</span></a></li></ol>","author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"NSDictionary实现原理","uid":"859f0b706fef61b48159b2531ea13be9","slug":"NSDictionary实现原理","date":"2021-12-08T05:04:53.000Z","updated":"2021-12-08T05:16:49.849Z","comments":true,"path":"api/articles/NSDictionary实现原理.json","keywords":null,"cover":null,"text":"/Users/jiajiagao/Desktop/截屏2021-11-26 下午2.39.43.png ","link":"","photos":[],"count_time":{"symbolsCount":52,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Mybatis环境搭建","uid":"84c46e71d38f152fbededa209add7e56","slug":"Mybatis环境搭建","date":"2021-10-30T11:49:03.000Z","updated":"2021-10-30T12:19:16.086Z","comments":true,"path":"api/articles/Mybatis环境搭建.json","keywords":null,"cover":[],"text":"MyBatis 环境搭建 mybatis 是一个优秀的基于 java 的持久层框架，它内部封装了 jdbc，使开发者只需要关注 sql 语句本身， 而不需要花费精力去处理加载驱动、创建连接、创建 statement 等繁杂的过程。mybatis 通过 xml 或注解的方式将要执行...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"mybatis","slug":"mybatis","count":1,"path":"api/tags/mybatis.json"}],"author":{"name":"LittleStart","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}