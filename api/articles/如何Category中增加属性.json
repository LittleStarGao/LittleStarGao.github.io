{"title":"如何Category中增加属性","uid":"8d5bb184f1a8d1302f056982173a3dd0","slug":"如何Category中增加属性","date":"2021-04-29T11:17:24.000Z","updated":"2021-04-29T12:00:03.410Z","comments":true,"path":"api/articles/如何Category中增加属性.json","keywords":null,"cover":null,"content":"<h5 id=\"如何在Category中增加属性（关联对象）\"><a href=\"#如何在Category中增加属性（关联对象）\" class=\"headerlink\" title=\"如何在Category中增加属性（关联对象）\"></a>如何在Category中增加属性（关联对象）</h5><p>在实际开发中，如果为Category添加一个属性，那么系统将不会为这个属性设置访问器方法，也就是setter和getter方法。这时候可以使用runtime提供的关联对象方法，动态地为该属性实现访问器方法。</p>\n<p><strong>开发者可以将关联对象想象成一个Objective-C对象</strong>，这个对象通过一个预先设置好的key连接到类的一个实例上。runtime提供了如下方法让一个对象连接到其他对象。</p>\n<pre class=\"line-numbers language-objective-c\" data-language=\"objective-c\"><code class=\"language-objective-c\">void objc_setAssociatedObject(id  _Nonnull NSObject, const void * _Nonnull key_, id  _Nullable value, objc_AssociationPolicy policy)\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>参数object是将要被关联的对象。参数key是一个void指针。</p>\n<p>参数value是关联对象，它是id类型。</p>\n<p><strong>参数policy是指定一个内存管理策略来处理关联对象如下：</strong></p>\n<p>指定的策略 </p>\n<ul>\n<li><code>OBJC_ASSOCIATION_ASSIGN</code>，那么被关联对象释放时，关联对象不会被释放，</li>\n</ul>\n<ul>\n<li><p><code>OBJC_ASSOCIATION_RETAIN或OBJC_ASSOCIATION_COPY</code>，那么关联对象就会被释放。</p>\n</li>\n<li><p><code>OBJC_ASSOCIATION_RETAIN_NONATOMIC</code>和<code>OBJC_ASSOCIATION_COPY_NONATOMIC</code>两种策略，当需要在多个线程中处理访问关联对象的多线程代码时，就会变得非常有用。</p>\n</li>\n</ul>\n<p><strong>runtime还提供了移除关联对象的方法：</strong></p>\n<pre class=\"line-numbers language-objective-c\" data-language=\"objective-c\"><code class=\"language-objective-c\">objc_removeAssociatedObjects(id  _Nonnull object)\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>可以使用这个方法移除所有和参数object关联的对象，或者使用<code>objc_setAssociatedObject</code>函数将key指定的关联对象设置为nil。</p>\n<p><strong>例子：</strong></p>\n<p><strong>给Person类别添加一个属性 address</strong></p>\n<pre class=\"line-numbers language-Objective-C\" data-language=\"Objective-C\"><code class=\"language-Objective-C\">#import &quot;Person.h&quot;\n#import &lt;objc&#x2F;runtime.h&gt;\n\nNS_ASSUME_NONNULL_BEGIN\n\n@interface Person (Cate)\n\n@property (nonatomic, strong) NSString *address;\n\n@end\n\nNS_ASSUME_NONNULL_END\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>Person+Cate.m 文件</strong></p>\n<pre class=\"line-numbers language-objective-c\" data-language=\"objective-c\"><code class=\"language-objective-c\">#import &quot;Person+Cate.h&quot;\n\n@implementation Person (Cate)\n\n- (id)address &#123;\n    id value &#x3D; objc_getAssociatedObject(self, &quot;address&quot;);\n    return value;\n&#125;\n\n- (void)setAddress:(NSString *)address &#123;\n    objc_setAssociatedObject(self, &quot;address&quot;, address, OBJC_ASSOCIATION_RETAIN);\n&#125;\n\n@end\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>结果说明已经成功地在Category中为类添加了一个新的属性，并且能够正常地使用这个属性。事实上，关联对象是使用哈希表实现的，将一个类映射到一张哈希表上，然后根据key找到关联对象，所以严格来说，关联对象和被关联对象没有任何关系，它不是存储在对象的内部。</p>\n","feature":null,"text":"如何在Category中增加属性（关联对象）在实际开发中，如果为Category添加一个属性，那么系统将不会为这个属性设置访问器方法，也就是setter和getter方法。这时候可以使用runtime提供的关联对象方法，动态地为该属性实现访问器方法。 开发者可以将关联对象想象成一...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%9C%A8Category%E4%B8%AD%E5%A2%9E%E5%8A%A0%E5%B1%9E%E6%80%A7%EF%BC%88%E5%85%B3%E8%81%94%E5%AF%B9%E8%B1%A1%EF%BC%89\"><span class=\"toc-text\">如何在Category中增加属性（关联对象）</span></a></li></ol>","author":{"name":"LittleLight","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"iOS开发者","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{}}